<Project Sdk="Microsoft.NET.Sdk.Web">

    <PropertyGroup>
        <TargetFramework>net9.0</TargetFramework>
        <Nullable>enable</Nullable>
        <ImplicitUsings>enable</ImplicitUsings>
        <RootNamespace>YAESandBox.API</RootNamespace>
        <GenerateDocumentationFile>true</GenerateDocumentationFile>
        <PackageLicenseExpression>MIT</PackageLicenseExpression>
        <AnalysisModeConfigureAwait>Library</AnalysisModeConfigureAwait>
    </PropertyGroup>

    <ItemGroup>
        <PackageReference Include="Microsoft.AspNetCore.OpenApi" Version="10.0.0-preview.3.25172.1"/>
        <PackageReference Include="Nito.AsyncEx" Version="5.1.2"/>
        <PackageReference Include="Swashbuckle.AspNetCore" Version="8.1.1"/>
        <InternalsVisibleTo Include="YAESandBox.Tests"/>
    </ItemGroup>

    <ItemGroup>
        <ProjectReference Include="..\YAESandBox.API.DTOs\YAESandBox.API.DTOs.csproj"/>
        <ProjectReference Include="..\YAESandBox.API.Services\YAESandBox.API.Services.csproj"/>
        <ProjectReference Include="..\YAESandBox.Core.Block\YAESandBox.Core.Block.csproj"/>
        <ProjectReference Include="..\YAESandBox.Core\YAESandBox.Core.csproj"/>
        <ProjectReference Include="..\YAESandBox.Depend\YAESandBox.Depend.csproj"/>
        <ProjectReference Include="..\YAESandBox.Workflow.AIService\YAESandBox.Workflow.AIService.csproj"/>
        <ProjectReference Include="..\YAESandBox.Workflow\YAESandBox.Workflow.csproj"/>
    </ItemGroup>

    <ItemGroup>
        <Folder Include="wwwroot\"/>
    </ItemGroup>

    <!--    <Target Name="CreateSwaggerJson" AfterTargets="Build" Condition="$(Configuration)=='Debug'">-->
    <!--        <Exec Command="swagger tofile &#45;&#45;output $(SwaggerJsonPath) $(OutputPath)$(AssemblyName).dll v1-public" WorkingDirectory="$(ProjectDir)" />-->
    <!--    </Target>-->

    <!-- ================================================================== -->
    <!-- == 自动生成 Swagger JSON 和 TypeScript 类型 == -->
    <!-- ================================================================== -->

    <!-- 步骤 1: 构建完成后生成 swagger.json 文件 -->
    <Target Name="GenerateSwaggerDoc" AfterTargets="Build" Condition="'$(Configuration)' == 'Debug'">
        <Message Text="------------------------------------------------------------------" Importance="high"/>
        <Message Text="正在生成 Swagger JSON 文件..." Importance="high"/>
        <PropertyGroup>
            <!-- 定义输出路径，可以根据你的项目结构调整 -->
            <SwaggerJsonPath>$(MSBuildProjectDirectory)/../../frontend/src/types/generated/api-client/v1-public.json</SwaggerJsonPath>
            <SwaggerJsonAiConfigPath>$(MSBuildProjectDirectory)/../../frontend/src/types/generated/api-client/aiconfig.json</SwaggerJsonAiConfigPath>
            <!-- 定义 Web API 项目的 DLL 路径 -->
            <ApiDllPath>$(TargetDir)$(TargetFileName)</ApiDllPath>
        </PropertyGroup>
        <!-- 使用 dotnet swagger 命令生成 v1 版本的 swagger.json -->
        <!-- $(TargetPath) 是编译后的后端项目 DLL 路径 -->
        <Exec Command="swagger tofile --output $(SwaggerJsonPath) $(OutputPath)$(AssemblyName).dll v1-public" WorkingDirectory="$(ProjectDir)"/>
        <Message Text="v1-public.json 已生成到: $(SwaggerJsonPath)" Importance="high"/>

        <Exec Command="swagger tofile --output $(SwaggerJsonAiConfigPath) $(OutputPath)$(AssemblyName).dll aiconfig" WorkingDirectory="$(ProjectDir)"/>
        <Message Text="aiconfig.json 已生成到: $(SwaggerJsonAiConfigPath)" Importance="high"/>
        <Message Text="------------------------------------------------------------------" Importance="high"/>
    </Target>

    <!-- 步骤 2: 使用生成的 swagger.json 生成 TypeScript API 客户端和类型 -->
    <Target Name="GenerateApiTypes" AfterTargets="GenerateSwaggerDoc" Condition="Exists('$(SwaggerJsonPath)')">
        <Message Text="------------------------------------------------------------------" Importance="high"/>
        <Message Text="正在从 Swagger JSON 生成 TypeScript API 客户端和类型..." Importance="high"/>
        <!-- 定义 API 客户端输出目录 -->
        <MakeDir Directories="$(ApiTypesOutputPath)" Condition="!Exists('$(ApiTypesOutputPath)')"/>
        <PropertyGroup><!-- 定义 OpenAPI 生成的 TS 类型输出路径 -->
            <FrontendProjectDir>$([System.IO.Path]::GetFullPath('$(MSBuildProjectDirectory)/../../frontend'))</FrontendProjectDir>
            <SwaggerJsonPath>$(FrontendProjectDir)/src/types/generated/api-client/v1-public.json</SwaggerJsonPath>
            <SwaggerJsonAiConfigPath>$(FrontendProjectDir)/src/types/generated/api-client/aiconfig.json</SwaggerJsonAiConfigPath>
            <ApiTypesOutputPath>$(FrontendProjectDir)/src/types/generated/api</ApiTypesOutputPath>
            <ApiTypesAiConfigOutputPath>$(FrontendProjectDir)/src/types/generated/aiconfigapi</ApiTypesAiConfigOutputPath>
        </PropertyGroup>
        <!-- 使用 openapi-typescript-codegen -->
        <!-- WorkingDirectory 设为前端目录 -->
        <!-- 这里的参数需要根据 openapi-typescript-codegen 的文档和你需要的功能进行调整 -->
        <Exec Command="npx openapi-typescript-codegen --input $(SwaggerJsonPath) --output $(ApiTypesOutputPath) --client axios --useOptions" WorkingDirectory="$(FrontendProjectDir)" ContinueOnError="false"/>
        <!-- 示例参数: -->
        <!-- -input: 输入 swagger.json 文件路径 -->
        <!-- -output: 输出目录 -->
        <!-- -client: 选择 HTTP 客户端 (axios, fetch 等) -->
        <!-- -useOptions: 使用选项对象作为方法参数，更灵活 -->
        <!-- 还有很多其他选项，例如 -name (客户端类名), -exportCore (导出核心请求逻辑), 等等 -->
        <Message Text="TypeScript API 客户端和类型已生成到: $(ApiTypesOutputPath)" Importance="high"/>
        <Exec Command="npx openapi-typescript-codegen --input $(SwaggerJsonAiConfigPath) --output $(ApiTypesAiConfigOutputPath) --client axios --useOptions" WorkingDirectory="$(FrontendProjectDir)" ContinueOnError="false"/>


        <Message Text="------------------------------------------------------------------" Importance="high"/>
    </Target>

    <!-- Target to generate NuGet license report after build -->
    <Target Name="GenerateLicenseReportForSolution" AfterTargets="Build">
        <!--
          这个 Target 会在每次成功构建 API 项目后运行 nuget-license，
          扫描位于解决方案根目录的 .sln 文件，并将报告生成在 backend 目录下。
          前提条件: nuget-license 工具已全局安装 (dotnet tool install -global nuget-license)
    
          MSBuild 属性说明:
          $(SolutionDir)   : 解决方案文件 (.sln) 所在的目录 (例如 "YAESandBox\")
          $(ProjectDir)    : 当前项目文件 (.csproj) 所在的目录 (例如 "YAESandBox\backend\YAESandBox.API\")
          $(SolutionFileName): 解决方案文件的名称 (例如 "YAESandBox.sln")
        -->
        <Message Text="%(Target.Name): Generating NuGet license report for solution '$(SolutionFileName)'..." Importance="high"/>

        <!-- 定义输入解决方案文件的路径 -->
        <PropertyGroup>
            <SolutionFilePath Condition="Exists('$(SolutionDir)$(SolutionFileName)')">$(SolutionDir)$(SolutionFileName)</SolutionFilePath>
            <!-- 定义输出文件的路径 -->
            <LicenseOutputPath>$(SolutionDir)backend\licenses.json</LicenseOutputPath>
            <!-- 定义输出目录的路径 (用于检查) -->
            <LicenseOutputDir>$(SolutionDir)backend\</LicenseOutputDir>
        </PropertyGroup>

        <!-- 检查解决方案文件是否存在 -->
        <Error Text="Solution file not found at '$(SolutionDir)$(SolutionFileName)'. Cannot generate license report." Condition="'$(SolutionFilePath)' == ''"/>
        <!-- 检查输出目录是否存在 (可选，Exec 可能会自动创建？保险起见) -->
        <MakeDir Directories="$(LicenseOutputDir)" Condition="!Exists('$(LicenseOutputDir)')"/>

        <!-- 执行 nuget-license 命令 -->
        <Exec Command="nuget-license -i $(SolutionFilePath) -t -o jsonPretty -fo $(LicenseOutputPath) -exclude-projects *Tests*"
              ContinueOnError="false"
              Condition="'$(SolutionFilePath)' != ''"/>
        <!-- 你可以在这里添加 -exclude-projects 参数来排除测试项目 -->
        <!-- 例如: -exclude-projects "*Tests*" -->

        <Message Text="%(Target.Name): NuGet license report generated at $(LicenseOutputPath)" Importance="high" Condition="Exists('$(LicenseOutputPath)')"/>
    </Target>


</Project>
