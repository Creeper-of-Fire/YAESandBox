{
    "hashes": {
        "launcher": "aebe2ad900ba295356a50e22938f42bcf78673cc1d1036a18598b7bdddd10130",
        "app": "0242ba9449e9879a2a3f04a515fd52037b48a672a4bb8f505a9b6a6f2c80084d",
        "backend": "a8c56210f69ab2fa7e576321689f2f9b1ed1d1777cfc0347bc8fc8027e68ff7f",
        "backend-slim": "525f241f3a1eba62307681020b76edd1d0caccec2ac8367c7b09c016620ac781",
        "plugins": {
            "YAESandBox.Plugin.LuaScript": "2742697ff69b7f1677afdc08e179a7b263b016c5c63abda5d6924737896a9857",
            "YAESandBox.Plugin.TextParser": "30b8b833ef0502b72c492a6ded3f23beb15eeab3dbb5085d560baaeb6a1cdd10"
        }
    },
    "manifests": {
        "full": {
            "components": [
                {
                    "id": "launcher",
                    "name": "启动器",
                    "version": "0.0.16",
                    "notes": "重新全部发布一遍试试看。好像文件校验刚刚有问题。",
                    "hash": "00224aabe43bcc8845567e231f62ccc09e8910fda1e56fc2b3bea82fe93815ea",
                    "url": "https://github.com/Creeper-of-Fire/YAESandBox/releases/download/v0.0.16/launcher.zip"
                },
                {
                    "id": "app",
                    "name": "前端应用",
                    "version": "0.0.30",
                    "notes": "### Release v0.0.30\n\n#### feat(monaco-editor): 实现 JSX/TSX 语言增强功能\n\n本次更新为 `SmartEditor` 组件引入了针对 JSX 和 TSX 的语言支持，通过一个可插拔的语言增强器 (`JsxTsLanguageEnhancer`) 实现。此更新显著提升了在编辑器内编写动态组件的开发体验。\n\n**主要特性与改进:**\n\n*   **JSX/TSX 支持**:\n    *   新增 `JsxTsLanguageEnhancer` 类，为 Monaco Editor 提供了 JSX/TSX 语法高亮、智能注释 (`{/* */}`) 和基础语法验证。\n    *   动态配置 Babel 解析器，以支持包括 Class Properties、Decorators 在内的现代 JavaScript/TypeScript 语法。\n\n*   **编辑器核心增强**:\n    *   `SmartEditor` 组件现已集成语言增强器接口，实现了核心编辑器与特定语言功能的逻辑解耦。\n    *   为 `monaco-jsx-highlighter` 库应用了必要的补丁，修复了 JSX 注释快捷键 (`Ctrl+/`) 失效的问题，并增强了编辑器卸载时的稳定性。\n\n*   **类型与智能提示**:\n    *   支持通过 `extraLibs` prop 向 Monaco Editor 的语言服务中注入外部类型定义（`.d.ts` 文件）。\n    *   新增了一个工具，可根据项目中的全局注入变量（如 UI 组件、Hooks）自动生成一个基本的 `.d.ts` 类型声明文件，为动态组件开发提供初步的代码提示。\n\n*   **功能集成**:\n    *   在 JSX 组件编辑器视图中，添加了在 TypeScript (TSX) 和 JavaScript (JSX) 模式之间切换的功能，编辑器会相应地进行重载以应用正确的语言配置。\n    *   从 `@yaesandbox-frontend/shared-feature` 中导出了 `JsxTsLanguageEnhancer`，以便上层应用可以按需创建和配置。",
                    "hash": "b236dc838771fea589fae51624f9320db4287977e07792c1446e6474dc83eab7",
                    "url": "https://github.com/Creeper-of-Fire/YAESandBox/releases/download/v0.0.30/app.zip"
                },
                {
                    "id": "backend",
                    "name": ".NET 后端 (完整版)",
                    "version": "0.0.28",
                    "notes": "我们很高兴发布 v0.0.28版本！本次更新的重点是**重构核心功能**与**提升系统健壮性**。我们对文本解析器符文进行了重大重构，使其更加清晰和可维护。同时，为了确保在重构过程中旧数据的平滑过渡，我们引入了全新的未知配置处理机制，极大地增强了数据兼容性。此外，我们还修复了几个恼人的 UI Bug，改善了您的日常使用体验。\n\n### ✨ 新功能 (Features)\n\n1.  **为解析失败的配置提供回退机制 (`UnknownRuneConfig`)**\n    为了在系统升级或配置损坏时保护用户数据，我们引入了一个强大的回退机制。当应用无法解析某个符文配置时，它不再是直接报错或卡死，而是会将其加载为一个 `UnknownRuneConfig`。\n    - **数据安全**：原始的 JSON 数据被完整保留，不会丢失。\n    - **可视化编辑器**：我们提供了一个全新的 `UnknownRuneEditor` 组件，您可以在其中直接查看和编辑原始的 JSON 数据，并尝试修复它。\n    - **无缝兼容**：这个机制确保了即使在重构（如下文提到的文本解析器）之后，用户的旧数据依然能够被加载和处理，提供了平滑的迁移路径。\n\n2.  **重构文本解析器符文与编辑器 (`text-parser`)**\n    我们对正则表达式和标签解析相关的符文配置与编辑器组件进行了一次彻底的重构，以提高代码质量和可维护性。\n    - **命名统一**：将 `RegexGenerator` 相关组件和配置统一重命名为 `RegexParser`，使其含义更准确。\n    - **组件拆分**：提取了通用的文本操作配置到 `TextOperationConfigEditor` 组件，让正则和标签解析器只关注其自身的核心配置，界面更清爽。\n    - **逻辑复用**：创建了 `useRuneTester` 组合式函数，统一了不同解析器的测试逻辑。\n    - **功能增强**：后端现已支持处理 `PromptList` 类型的输入，并优化了调试信息的展示格式。\n\n### 🐛 问题修复 (Bug Fixes)\n\n1.  **修复 `InlineInputPopover` 输入框无法清空的问题 (fix/share)**\n    解决了在重命名等场景下，当用户删除输入框中的所有字符后，内容会自动恢复为初始值的问题。现在，您可以正常地将输入框清空了。\n\n2.  **修复全局资源面板无法滚动的问题 (fix/ui)**\n    修复了全局资源面板 (`GlobalResourcePanel`) 在内容溢出时无法显示滚动条的布局问题。现在，当资源列表过长时，您可以顺畅地滚动查看所有内容。同时，我们顺便微调了新建全局组件的 UI 布局。\n\n---\n\n感谢您的使用与支持！",
                    "hash": "2c6f8b9fa8c7df8e26a6977c062db49ac9ae0a879795537a798cb3a55b0161a6",
                    "url": "https://github.com/Creeper-of-Fire/YAESandBox/releases/download/v0.0.28/backend.zip"
                }
            ]
        },
        "slim": {
            "components": [
                {
                    "id": "launcher",
                    "name": "启动器",
                    "version": "0.0.16",
                    "notes": "重新全部发布一遍试试看。好像文件校验刚刚有问题。",
                    "hash": "00224aabe43bcc8845567e231f62ccc09e8910fda1e56fc2b3bea82fe93815ea",
                    "url": "https://github.com/Creeper-of-Fire/YAESandBox/releases/download/v0.0.16/launcher.zip"
                },
                {
                    "id": "app",
                    "name": "前端应用",
                    "version": "0.0.30",
                    "notes": "### Release v0.0.30\n\n#### feat(monaco-editor): 实现 JSX/TSX 语言增强功能\n\n本次更新为 `SmartEditor` 组件引入了针对 JSX 和 TSX 的语言支持，通过一个可插拔的语言增强器 (`JsxTsLanguageEnhancer`) 实现。此更新显著提升了在编辑器内编写动态组件的开发体验。\n\n**主要特性与改进:**\n\n*   **JSX/TSX 支持**:\n    *   新增 `JsxTsLanguageEnhancer` 类，为 Monaco Editor 提供了 JSX/TSX 语法高亮、智能注释 (`{/* */}`) 和基础语法验证。\n    *   动态配置 Babel 解析器，以支持包括 Class Properties、Decorators 在内的现代 JavaScript/TypeScript 语法。\n\n*   **编辑器核心增强**:\n    *   `SmartEditor` 组件现已集成语言增强器接口，实现了核心编辑器与特定语言功能的逻辑解耦。\n    *   为 `monaco-jsx-highlighter` 库应用了必要的补丁，修复了 JSX 注释快捷键 (`Ctrl+/`) 失效的问题，并增强了编辑器卸载时的稳定性。\n\n*   **类型与智能提示**:\n    *   支持通过 `extraLibs` prop 向 Monaco Editor 的语言服务中注入外部类型定义（`.d.ts` 文件）。\n    *   新增了一个工具，可根据项目中的全局注入变量（如 UI 组件、Hooks）自动生成一个基本的 `.d.ts` 类型声明文件，为动态组件开发提供初步的代码提示。\n\n*   **功能集成**:\n    *   在 JSX 组件编辑器视图中，添加了在 TypeScript (TSX) 和 JavaScript (JSX) 模式之间切换的功能，编辑器会相应地进行重载以应用正确的语言配置。\n    *   从 `@yaesandbox-frontend/shared-feature` 中导出了 `JsxTsLanguageEnhancer`，以便上层应用可以按需创建和配置。",
                    "hash": "b236dc838771fea589fae51624f9320db4287977e07792c1446e6474dc83eab7",
                    "url": "https://github.com/Creeper-of-Fire/YAESandBox/releases/download/v0.0.30/app.zip"
                },
                {
                    "id": "backend",
                    "name": ".NET 后端 (精简版)",
                    "version": "0.0.28",
                    "notes": "我们很高兴发布 v0.0.28版本！本次更新的重点是**重构核心功能**与**提升系统健壮性**。我们对文本解析器符文进行了重大重构，使其更加清晰和可维护。同时，为了确保在重构过程中旧数据的平滑过渡，我们引入了全新的未知配置处理机制，极大地增强了数据兼容性。此外，我们还修复了几个恼人的 UI Bug，改善了您的日常使用体验。\n\n### ✨ 新功能 (Features)\n\n1.  **为解析失败的配置提供回退机制 (`UnknownRuneConfig`)**\n    为了在系统升级或配置损坏时保护用户数据，我们引入了一个强大的回退机制。当应用无法解析某个符文配置时，它不再是直接报错或卡死，而是会将其加载为一个 `UnknownRuneConfig`。\n    - **数据安全**：原始的 JSON 数据被完整保留，不会丢失。\n    - **可视化编辑器**：我们提供了一个全新的 `UnknownRuneEditor` 组件，您可以在其中直接查看和编辑原始的 JSON 数据，并尝试修复它。\n    - **无缝兼容**：这个机制确保了即使在重构（如下文提到的文本解析器）之后，用户的旧数据依然能够被加载和处理，提供了平滑的迁移路径。\n\n2.  **重构文本解析器符文与编辑器 (`text-parser`)**\n    我们对正则表达式和标签解析相关的符文配置与编辑器组件进行了一次彻底的重构，以提高代码质量和可维护性。\n    - **命名统一**：将 `RegexGenerator` 相关组件和配置统一重命名为 `RegexParser`，使其含义更准确。\n    - **组件拆分**：提取了通用的文本操作配置到 `TextOperationConfigEditor` 组件，让正则和标签解析器只关注其自身的核心配置，界面更清爽。\n    - **逻辑复用**：创建了 `useRuneTester` 组合式函数，统一了不同解析器的测试逻辑。\n    - **功能增强**：后端现已支持处理 `PromptList` 类型的输入，并优化了调试信息的展示格式。\n\n### 🐛 问题修复 (Bug Fixes)\n\n1.  **修复 `InlineInputPopover` 输入框无法清空的问题 (fix/share)**\n    解决了在重命名等场景下，当用户删除输入框中的所有字符后，内容会自动恢复为初始值的问题。现在，您可以正常地将输入框清空了。\n\n2.  **修复全局资源面板无法滚动的问题 (fix/ui)**\n    修复了全局资源面板 (`GlobalResourcePanel`) 在内容溢出时无法显示滚动条的布局问题。现在，当资源列表过长时，您可以顺畅地滚动查看所有内容。同时，我们顺便微调了新建全局组件的 UI 布局。\n\n---\n\n感谢您的使用与支持！",
                    "hash": "94a614a025528560791f8aeb6d6059fd8b8b3f685ee2d1ce78ecb31c67b739fa",
                    "url": "https://github.com/Creeper-of-Fire/YAESandBox/releases/download/v0.0.28/backend-slim.zip"
                }
            ]
        },
        "plugins": [
            {
                "id": "YAESandBox.Plugin.LuaScript",
                "name": "YAESandBox.Plugin.LuaScript",
                "version": "0.0.26",
                "description": "发布于 v0.0.26:\n本次更新聚焦于两大核心领域：对工作流执行引擎的根本性重构，以及对工作台前端编辑体验的全面现代化。我们引入了全新的可视化编辑器和通用的图执行模型，并对编辑器状态管理进行了彻底的重构，以提升性能、可维护性和用户体验。\n\n#### ✨ 新特性 (Features)\n\n*   **全新可视化工作流编辑器**: 引入了直观的图形化编辑器，用于编排工作流与枢机（Tuum）之间的关系。编辑器支持拖拽节点、连接、多选等基本操作，并能**自动持久化节点布局**，提升了工作流的配置效率和可读性。\n*   **增强的符文变量信息展示**: 在编辑器中，变量标签现在可以通过悬浮提示展示其类型定义、描述和可选性等更丰富的元信息。\n*   **新增动态字符串列表组件**: 表单系统现已支持可动态增删的字符串数组成员，提升了相关配置的灵活性。\n\n#### 🛠️ 重构与优化 (Refactoring & Optimizations)\n\n##### **核心执行引擎重构：向通用图模型演进**\n\n新的可视化编辑器由一个通用的、基于图的执行引擎 `GraphExecutor` 驱动，它替代了原有的线性执行逻辑。这一重构使得工作流的处理更加灵活和强大。\n\n在重构过程中，我们曾为简化数据流引入了 `Context` 类型。然而，为保持符文的独立性并提升性能，我们最终决定移除这一设计。相关的 `PromptGenerationRune` 和 `StaticVariableRune` 等核心符文已恢复为直接处理离散变量，简化了其内部逻辑。\n\n##### **工作台体验升级：全局编辑会话与上下文管理**\n\n对前端编辑器的状态管理进行了彻底的重构。原有的 `EditSession` 已升级为全局唯一的 `GlobalEditSession`，并引入了 `EditorContext` 来统一管理选中项和编辑操作。\n\n*   **统一的状态管理**: 通过 `useActiveEditorContext` 等新的 Composable 函数，我们集中了编辑状态的来源，解决了之前数据响应不同步的问题。\n*   **性能与响应性提升**: 优化了组件的渲染和数据绑定方式，显著提升了编辑面板和工作流编辑器的流畅度。\n*   **代码结构优化**: 移除了旧的状态管理模式，使代码库更加清晰和易于维护。\n*   **UI 一致性**: 重构了颜色计算逻辑，并统一了工作流节点的样式，确保在不同主题下表现一致。\n\n#### 🐛 修复 (Fixes)\n\n*   **工作流**: 修复了工作流入口标识符（`__workflow_input__`）与后端不一致的问题。\n*   **工作流**: 增强了图执行器的数据处理能力，通过 `postProcessOutput` 参数防止了扇出场景下的数据污染。\n*   **工作台**: 修复了编辑面板与工作流编辑器之间因数据双向绑定导致的响应不同步问题。\n*   **LuaScriptRune**: 更新了正则表达式，以正确匹配包含 `@type` 注释的变量定义。\n\n#### 展望\n\n目前，后端的枢机（Tuum）与符文（Rune）层级已具备支持图形化连接的能力。然而，为了保持清晰的抽象层次和良好的用户体验，前端的工作流编辑器将专注于工作流（Workflow）与枢机（Tuum）之间的连接。\n\n我们认为，枢机内部的符文组织应遵循更简洁的范式。因此，下一步计划是将枢机-符文的交互模型改回原有的非图形化模式，以简化配置并降低复杂性。",
                "hash": "077825d992d2ef42ddf6258c3caf141c952b963efdfb372d4138f86039dbf528",
                "url": "https://github.com/Creeper-of-Fire/YAESandBox/releases/download/v0.0.26/YAESandBox.Plugin.LuaScript.zip"
            },
            {
                "id": "YAESandBox.Plugin.TextParser",
                "name": "YAESandBox.Plugin.TextParser",
                "version": "0.0.28",
                "description": "发布于 v0.0.28:\n我们很高兴发布 v0.0.28版本！本次更新的重点是**重构核心功能**与**提升系统健壮性**。我们对文本解析器符文进行了重大重构，使其更加清晰和可维护。同时，为了确保在重构过程中旧数据的平滑过渡，我们引入了全新的未知配置处理机制，极大地增强了数据兼容性。此外，我们还修复了几个恼人的 UI Bug，改善了您的日常使用体验。\n\n### ✨ 新功能 (Features)\n\n1.  **为解析失败的配置提供回退机制 (`UnknownRuneConfig`)**\n    为了在系统升级或配置损坏时保护用户数据，我们引入了一个强大的回退机制。当应用无法解析某个符文配置时，它不再是直接报错或卡死，而是会将其加载为一个 `UnknownRuneConfig`。\n    - **数据安全**：原始的 JSON 数据被完整保留，不会丢失。\n    - **可视化编辑器**：我们提供了一个全新的 `UnknownRuneEditor` 组件，您可以在其中直接查看和编辑原始的 JSON 数据，并尝试修复它。\n    - **无缝兼容**：这个机制确保了即使在重构（如下文提到的文本解析器）之后，用户的旧数据依然能够被加载和处理，提供了平滑的迁移路径。\n\n2.  **重构文本解析器符文与编辑器 (`text-parser`)**\n    我们对正则表达式和标签解析相关的符文配置与编辑器组件进行了一次彻底的重构，以提高代码质量和可维护性。\n    - **命名统一**：将 `RegexGenerator` 相关组件和配置统一重命名为 `RegexParser`，使其含义更准确。\n    - **组件拆分**：提取了通用的文本操作配置到 `TextOperationConfigEditor` 组件，让正则和标签解析器只关注其自身的核心配置，界面更清爽。\n    - **逻辑复用**：创建了 `useRuneTester` 组合式函数，统一了不同解析器的测试逻辑。\n    - **功能增强**：后端现已支持处理 `PromptList` 类型的输入，并优化了调试信息的展示格式。\n\n### 🐛 问题修复 (Bug Fixes)\n\n1.  **修复 `InlineInputPopover` 输入框无法清空的问题 (fix/share)**\n    解决了在重命名等场景下，当用户删除输入框中的所有字符后，内容会自动恢复为初始值的问题。现在，您可以正常地将输入框清空了。\n\n2.  **修复全局资源面板无法滚动的问题 (fix/ui)**\n    修复了全局资源面板 (`GlobalResourcePanel`) 在内容溢出时无法显示滚动条的布局问题。现在，当资源列表过长时，您可以顺畅地滚动查看所有内容。同时，我们顺便微调了新建全局组件的 UI 布局。\n\n---\n\n感谢您的使用与支持！",
                "hash": "5a70b33e70f2bc0731ab6401e75fd5a5369fcde01a8b0e5e41536549d1e11557",
                "url": "https://github.com/Creeper-of-Fire/YAESandBox/releases/download/v0.0.28/YAESandBox.Plugin.TextParser.zip"
            }
        ]
    }
}