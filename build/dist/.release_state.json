{
    "hashes": {
        "launcher": "e4e868816eb4252aa29c109cf175819c9eb2caacc09e8eec5b3224e1357f144a",
        "app": "f06868c3ddb3804bef62b796a566b85eab286650416b7a933a0483482c575e12",
        "backend": "598d5ffada5cb0b2b722fa78fa03ebcde99620f7b3c884d341941c2f50a02ccb",
        "backend-slim": "2d42b3c7d5a474c385a073dd50446fcadcfd6ebed88b7a6c803ba89bef782459",
        "plugins": {
            "YAESandBox.Plugin.FileSystemConfigProvider": "1e7492b8d67ba2fc906619e29d711978f834e3fa3c1b701d84936ce9084a5e0c",
            "YAESandBox.Plugin.LuaScript": "1d3bfbfe8eb87b00b66dfc341b98adeb887f11c78fe014b1b7e9fe4571f58aa0",
            "YAESandBox.Plugin.TextParser": "c77dfd9fef3650ae815eb5923f46ed7aa48ddd6e3543e621c12c2eca0445b993"
        }
    },
    "manifests": {
        "full": {
            "components": [
                {
                    "id": "launcher",
                    "name": "启动器",
                    "notes": "## v0.0.35 Release Notes\n\n我们很高兴地发布 v0.0.35 版本！本次更新不仅带来了多项期待已久的新功能和架构升级，还**解决了一个潜藏在之前多个版本中的关键缓存问题**，确保所有用户都能顺畅地获取到应用更新。\n\n### ⚠️ **重要提示：首次更新需强制刷新**\n\n在之前的版本中，由于浏览器缓存策略不当，您可能无法自动加载到最新版本的前端应用界面。这个问题在 `v0.0.35` 中已被彻底修复。\n\n为了确保您能应用此修复并接收未来的所有更新，**在更新到此版本后，请务必执行一次强制刷新操作**：\n\n*   在应用窗口内，按下 `Ctrl + Shift + R` (Windows/Linux) 或 `Cmd + Shift + R` (macOS)。\n*   或者使用 `Shift + F5`。\n\n**此操作仅需执行一次**，后续更新将能被自动正确加载。对于此前更新不便带来的糟糕体验，我们深表歉意。\n\n---\n\n### 🐛 修复与优化\n\n*   **解决了前端版本更新不及时的问题（关键修复）**\n    *   通过调整后端静态文件服务器的缓存策略，我们确保了 `index.html` 文件永远不会被浏览器缓存。这意味着每次启动应用时，您都将加载到最新的前端版本，彻底解决了旧版本界面残留的问题。\n\n*   **优化了工作台资源列表的性能**\n    *   重构了全局资源列表项的内部数据流，使其直接从全局状态管理器 (Pinia) 动态获取最新数据。这减少了组件间的 props 传递，提升了 UI 的响应速度和数据一致性。\n\n*   **更新了应用程序图标**\n    *   我们为应用设计并提供了一个更简洁、更具辨识度的新图标。\n\n### ✨ 核心重构与架构升级\n\n*   **全新的配置存储与管理系统**\n    *   在后端引入了统一的 `StoredConfig<T>` 泛型模型，为所有配置增加了对**只读状态**和**元数据**（如描述、标签）的支持，为未来的“模块内置配置”等功能奠定了坚实基础。\n\n*   **工作台核心体验重构与优化**\n    *   重构了编辑器的上下文管理机制，并引入 `useGlobalResources` 可组合函数，统一了全局资源的获取与加载逻辑，使资源面板的数据展示更具响应性和准确性。\n\n### 🚀 新增功能\n\n*   **全局资源标签筛选**\n    *   在工作台的全局资源面板中新增了标签筛选功能，您可以通过标签快速过滤工作流 (Workflow)、Tuum 和符文 (Rune) 等资源。\n\n*   **配置元数据编辑器**\n    *   在工作台侧边栏新增了“配置元数据编辑器”，方便您在编辑配置时，同步修改其描述、标签等元数据。\n\n*   **为“内置配置”提供底层支持（敬请期待！）**\n    *   引入了新的 `FileSystemConfigProviderPlugin` 插件，它为应用支持“项目内置配置”提供了技术基础。虽然此版本暂未捆绑任何内置配置文件，但该功能为我们未来发布官方示例、模板配置铺平了道路，**大家可以期待一下！**\n\n再次感谢您的耐心与支持，希望您喜欢这些更新！\n\n---\n\n**追加说明：为什么要从 v0.0.33 直接跳到 v0.0.35？**\n\n在 `v0.0.34` 版本发布后的几分钟内，我们发现其缓存策略存在严重缺陷，可能会导致用户无法接收到后续更新。为了防止更多用户受到影响，我们迅速撤回了该版本。`v0.0.35` 包含了原计划在 `v0.0.34` 中的所有功能，并紧急修正了该缓存问题，是稳定且推荐的更新版本。我们为这次发布过程中的失误深表歉意。",
                    "description": "应用程序启动器，负责检查更新和启动核心应用。",
                    "version": "0.0.35",
                    "hash": "1ce0dafd346c729cd8c2e2e2b7cad53ff44dcc038922921731f7c4d7f5e8f98b",
                    "url": "https://github.com/Creeper-of-Fire/YAESandBox/releases/download/v0.0.35/launcher.zip"
                },
                {
                    "id": "app",
                    "name": "前端应用",
                    "notes": "## YAESandBox v0.1.3 发布日志\n\n本次更新是一个专注于**修复与体验完善**的维护版本。我们重点解决了 v0.1.2 版本中“工作流选择器 API 预览”功能在实际应用场景中的上下文缺失问题，并将其能力全面推广到了所有相关组件中，确保了功能设计的完整性和一致性。\n\n### 🐛 功能修复与完善 (Fixes & Improvements)\n\n*   **增强工作流选择器的上下文感知能力 (`307b5643`)**\n    *   **修复**：解决了在多个核心场景下（如创造物品指令、通用生成器、聊天等），工作流选择器无法展示当前任务对**输出数据契约 (Output Contract)** 的具体期望的问题。\n    *   **完善**: `WorkflowSelectorButton` 及其关联的选择面板现在能够接收并清晰地展示一个 `expectedOutputs` 列表。这使得用户在选择工作流之前，就能直观地了解消费端期望从工作流中获取的数据结构（例如 `['context']` 或 `['content']`），从而做出更准确的决策。\n    *   **推广**: 此功能已全面应用于 `IntentComponent`、`GeneratorPanel` 和 `ChatView` 等所有使用工作流选择器的组件中，补全了 v0.1.2 版本中 API 预览功能的最后一环，显著提升了开发和使用的体验。\n\n*   **引入 `extractOutputsFromSchema` 工具函数 (`307b5643`)**\n    *   **代码质量**: 为 `core-services` 模块新增了 `extractOutputsFromSchema` 辅助函数。它能够将组件的 `EntityFieldSchema` 声明式地转换为 `expectedOutputs` 列表，实现了业务逻辑（数据结构定义）与 UI 展示（选择器提示）的自动同步，减少了重复代码和硬编码。",
                    "description": "YAESandBox 的前端用户界面。",
                    "version": "0.1.3",
                    "hash": "76bec1face3db941eca177c70999e0a0133ad5098f6b66c83287c3409cd5c6b6",
                    "url": "https://github.com/Creeper-of-Fire/YAESandBox/releases/download/v0.1.3/app.zip"
                },
                {
                    "id": "backend",
                    "name": ".NET 后端 (完整版)",
                    "notes": "## YAESandBox v0.1.2 发布日志\n\n本次更新是一个以**代码质量提升**和**内部重构**为核心的维护版本，旨在为未来的功能开发奠定更坚实的基础。我们对前后端代码库进行了多项现代化重构，并修复了若干问题。此外，本次更新也为工作流选择器带来了一项实用的**功能增强**。\n\n### ✨ 功能增强 (Enhancement)\n\n*   **工作流选择器中的 API 预览 (`62c2e61`, `f1315ab`, `becb860`)**\n    *   为工作流引入了初步的**静态分析**能力，现在系统可以分析出工作流对外暴露的事件 API。\n    *   在**工作流选择器**中，用户现在可以方便地预览每个工作流将要发射的事件及其数据结构。这有助于在复用和集成工作流时，更清晰地了解其副作用，做出更准确的选择。\n\n### 🛠️ 重构与代码质量 (Refactoring & Code Quality)\n\n本次发布包含了大量的内部代码重构，虽然这些变化对最终用户是透明的，但它们极大地提升了项目的可维护性、健壮性和开发效率。\n\n*   **全面迁移至 TSX 语法 (`f99c92d`)**:\n    *   为了提升代码的可读性、类型安全和开发体验，我们将项目中所有使用 Vue `h()` 渲染函数的地方，系统性地迁移到了 **TSX** 语法。\n\n*   **后端项目结构现代化 (`f286377`, `3480019`)**:\n    *   对后端核心项目（如 `Workflow`, `AIService`）进行了结构重构，将其拆分为 `.Core` (核心逻辑) 和 `.API` (Web 接口) 等部分，努力实现业务逻辑与宿主环境的解耦。\n    *   引入了新的模块系统抽象，降低了核心模块对 ASP.NET Core 的依赖。\n\n*   **前端通用逻辑抽象与规范化 (`dc75f65`)**:\n    *   为解决插件间存档管理逻辑重复的问题，引入了 `withSaveGameRoot` 高阶组件 (HOC) 进行封装，简化了插件的入口代码。\n    *   统一了前端 `core-services` 的模块导出路径为 `kebab-case` 风格，增强了代码库的一致性。\n\n*   **工作台交互逻辑重构 (`fd3aae4`, `ce7f7dc`)**:\n    *   废弃了原有的、逻辑复杂的 `InlineInputPopover` 组件，采用 `useModal()` 和 **TSX** 动态渲染交互界面，使得配置项操作（新建/重命名等）的代码更内聚、更易于维护。\n\n### 🐛 Bug 修复 (Bug Fixes)\n\n*   **发布 (`38851ca`)**: 解决了单文件发布场景下的编译器警告和资源路径处理问题，提升了兼容性。",
                    "description": ".NET 后端。",
                    "version": "0.1.2",
                    "hash": "f2efba8161060296c920294a850c0e94f99ccbb18b4a3865f3cd4a227933f7ef",
                    "url": "https://github.com/Creeper-of-Fire/YAESandBox/releases/download/v0.1.2/backend.zip"
                }
            ]
        },
        "slim": {
            "components": [
                {
                    "id": "launcher",
                    "name": "启动器",
                    "notes": "## v0.0.35 Release Notes\n\n我们很高兴地发布 v0.0.35 版本！本次更新不仅带来了多项期待已久的新功能和架构升级，还**解决了一个潜藏在之前多个版本中的关键缓存问题**，确保所有用户都能顺畅地获取到应用更新。\n\n### ⚠️ **重要提示：首次更新需强制刷新**\n\n在之前的版本中，由于浏览器缓存策略不当，您可能无法自动加载到最新版本的前端应用界面。这个问题在 `v0.0.35` 中已被彻底修复。\n\n为了确保您能应用此修复并接收未来的所有更新，**在更新到此版本后，请务必执行一次强制刷新操作**：\n\n*   在应用窗口内，按下 `Ctrl + Shift + R` (Windows/Linux) 或 `Cmd + Shift + R` (macOS)。\n*   或者使用 `Shift + F5`。\n\n**此操作仅需执行一次**，后续更新将能被自动正确加载。对于此前更新不便带来的糟糕体验，我们深表歉意。\n\n---\n\n### 🐛 修复与优化\n\n*   **解决了前端版本更新不及时的问题（关键修复）**\n    *   通过调整后端静态文件服务器的缓存策略，我们确保了 `index.html` 文件永远不会被浏览器缓存。这意味着每次启动应用时，您都将加载到最新的前端版本，彻底解决了旧版本界面残留的问题。\n\n*   **优化了工作台资源列表的性能**\n    *   重构了全局资源列表项的内部数据流，使其直接从全局状态管理器 (Pinia) 动态获取最新数据。这减少了组件间的 props 传递，提升了 UI 的响应速度和数据一致性。\n\n*   **更新了应用程序图标**\n    *   我们为应用设计并提供了一个更简洁、更具辨识度的新图标。\n\n### ✨ 核心重构与架构升级\n\n*   **全新的配置存储与管理系统**\n    *   在后端引入了统一的 `StoredConfig<T>` 泛型模型，为所有配置增加了对**只读状态**和**元数据**（如描述、标签）的支持，为未来的“模块内置配置”等功能奠定了坚实基础。\n\n*   **工作台核心体验重构与优化**\n    *   重构了编辑器的上下文管理机制，并引入 `useGlobalResources` 可组合函数，统一了全局资源的获取与加载逻辑，使资源面板的数据展示更具响应性和准确性。\n\n### 🚀 新增功能\n\n*   **全局资源标签筛选**\n    *   在工作台的全局资源面板中新增了标签筛选功能，您可以通过标签快速过滤工作流 (Workflow)、Tuum 和符文 (Rune) 等资源。\n\n*   **配置元数据编辑器**\n    *   在工作台侧边栏新增了“配置元数据编辑器”，方便您在编辑配置时，同步修改其描述、标签等元数据。\n\n*   **为“内置配置”提供底层支持（敬请期待！）**\n    *   引入了新的 `FileSystemConfigProviderPlugin` 插件，它为应用支持“项目内置配置”提供了技术基础。虽然此版本暂未捆绑任何内置配置文件，但该功能为我们未来发布官方示例、模板配置铺平了道路，**大家可以期待一下！**\n\n再次感谢您的耐心与支持，希望您喜欢这些更新！\n\n---\n\n**追加说明：为什么要从 v0.0.33 直接跳到 v0.0.35？**\n\n在 `v0.0.34` 版本发布后的几分钟内，我们发现其缓存策略存在严重缺陷，可能会导致用户无法接收到后续更新。为了防止更多用户受到影响，我们迅速撤回了该版本。`v0.0.35` 包含了原计划在 `v0.0.34` 中的所有功能，并紧急修正了该缓存问题，是稳定且推荐的更新版本。我们为这次发布过程中的失误深表歉意。",
                    "description": "应用程序启动器，负责检查更新和启动核心应用。",
                    "version": "0.0.35",
                    "hash": "1ce0dafd346c729cd8c2e2e2b7cad53ff44dcc038922921731f7c4d7f5e8f98b",
                    "url": "https://github.com/Creeper-of-Fire/YAESandBox/releases/download/v0.0.35/launcher.zip"
                },
                {
                    "id": "app",
                    "name": "前端应用",
                    "notes": "## YAESandBox v0.1.3 发布日志\n\n本次更新是一个专注于**修复与体验完善**的维护版本。我们重点解决了 v0.1.2 版本中“工作流选择器 API 预览”功能在实际应用场景中的上下文缺失问题，并将其能力全面推广到了所有相关组件中，确保了功能设计的完整性和一致性。\n\n### 🐛 功能修复与完善 (Fixes & Improvements)\n\n*   **增强工作流选择器的上下文感知能力 (`307b5643`)**\n    *   **修复**：解决了在多个核心场景下（如创造物品指令、通用生成器、聊天等），工作流选择器无法展示当前任务对**输出数据契约 (Output Contract)** 的具体期望的问题。\n    *   **完善**: `WorkflowSelectorButton` 及其关联的选择面板现在能够接收并清晰地展示一个 `expectedOutputs` 列表。这使得用户在选择工作流之前，就能直观地了解消费端期望从工作流中获取的数据结构（例如 `['context']` 或 `['content']`），从而做出更准确的决策。\n    *   **推广**: 此功能已全面应用于 `IntentComponent`、`GeneratorPanel` 和 `ChatView` 等所有使用工作流选择器的组件中，补全了 v0.1.2 版本中 API 预览功能的最后一环，显著提升了开发和使用的体验。\n\n*   **引入 `extractOutputsFromSchema` 工具函数 (`307b5643`)**\n    *   **代码质量**: 为 `core-services` 模块新增了 `extractOutputsFromSchema` 辅助函数。它能够将组件的 `EntityFieldSchema` 声明式地转换为 `expectedOutputs` 列表，实现了业务逻辑（数据结构定义）与 UI 展示（选择器提示）的自动同步，减少了重复代码和硬编码。",
                    "description": "YAESandBox 的前端用户界面。",
                    "version": "0.1.3",
                    "hash": "76bec1face3db941eca177c70999e0a0133ad5098f6b66c83287c3409cd5c6b6",
                    "url": "https://github.com/Creeper-of-Fire/YAESandBox/releases/download/v0.1.3/app.zip"
                },
                {
                    "id": "backend",
                    "name": ".NET 后端 (精简版)",
                    "notes": "## YAESandBox v0.1.2 发布日志\n\n本次更新是一个以**代码质量提升**和**内部重构**为核心的维护版本，旨在为未来的功能开发奠定更坚实的基础。我们对前后端代码库进行了多项现代化重构，并修复了若干问题。此外，本次更新也为工作流选择器带来了一项实用的**功能增强**。\n\n### ✨ 功能增强 (Enhancement)\n\n*   **工作流选择器中的 API 预览 (`62c2e61`, `f1315ab`, `becb860`)**\n    *   为工作流引入了初步的**静态分析**能力，现在系统可以分析出工作流对外暴露的事件 API。\n    *   在**工作流选择器**中，用户现在可以方便地预览每个工作流将要发射的事件及其数据结构。这有助于在复用和集成工作流时，更清晰地了解其副作用，做出更准确的选择。\n\n### 🛠️ 重构与代码质量 (Refactoring & Code Quality)\n\n本次发布包含了大量的内部代码重构，虽然这些变化对最终用户是透明的，但它们极大地提升了项目的可维护性、健壮性和开发效率。\n\n*   **全面迁移至 TSX 语法 (`f99c92d`)**:\n    *   为了提升代码的可读性、类型安全和开发体验，我们将项目中所有使用 Vue `h()` 渲染函数的地方，系统性地迁移到了 **TSX** 语法。\n\n*   **后端项目结构现代化 (`f286377`, `3480019`)**:\n    *   对后端核心项目（如 `Workflow`, `AIService`）进行了结构重构，将其拆分为 `.Core` (核心逻辑) 和 `.API` (Web 接口) 等部分，努力实现业务逻辑与宿主环境的解耦。\n    *   引入了新的模块系统抽象，降低了核心模块对 ASP.NET Core 的依赖。\n\n*   **前端通用逻辑抽象与规范化 (`dc75f65`)**:\n    *   为解决插件间存档管理逻辑重复的问题，引入了 `withSaveGameRoot` 高阶组件 (HOC) 进行封装，简化了插件的入口代码。\n    *   统一了前端 `core-services` 的模块导出路径为 `kebab-case` 风格，增强了代码库的一致性。\n\n*   **工作台交互逻辑重构 (`fd3aae4`, `ce7f7dc`)**:\n    *   废弃了原有的、逻辑复杂的 `InlineInputPopover` 组件，采用 `useModal()` 和 **TSX** 动态渲染交互界面，使得配置项操作（新建/重命名等）的代码更内聚、更易于维护。\n\n### 🐛 Bug 修复 (Bug Fixes)\n\n*   **发布 (`38851ca`)**: 解决了单文件发布场景下的编译器警告和资源路径处理问题，提升了兼容性。",
                    "description": ".NET 后端。",
                    "version": "0.1.2",
                    "hash": "3e79e6c41835bb618f391f71cd7b96e30c2a9a9daecf30999eee49fb81451672",
                    "url": "https://github.com/Creeper-of-Fire/YAESandBox/releases/download/v0.1.2/backend-slim.zip"
                }
            ]
        },
        "plugins": [
            {
                "id": "YAESandBox.Plugin.LuaScript",
                "name": "YAESandBox.Plugin.LuaScript",
                "notes": "## YAESandBox v0.1.2 发布日志\n\n本次更新是一个以**代码质量提升**和**内部重构**为核心的维护版本，旨在为未来的功能开发奠定更坚实的基础。我们对前后端代码库进行了多项现代化重构，并修复了若干问题。此外，本次更新也为工作流选择器带来了一项实用的**功能增强**。\n\n### ✨ 功能增强 (Enhancement)\n\n*   **工作流选择器中的 API 预览 (`62c2e61`, `f1315ab`, `becb860`)**\n    *   为工作流引入了初步的**静态分析**能力，现在系统可以分析出工作流对外暴露的事件 API。\n    *   在**工作流选择器**中，用户现在可以方便地预览每个工作流将要发射的事件及其数据结构。这有助于在复用和集成工作流时，更清晰地了解其副作用，做出更准确的选择。\n\n### 🛠️ 重构与代码质量 (Refactoring & Code Quality)\n\n本次发布包含了大量的内部代码重构，虽然这些变化对最终用户是透明的，但它们极大地提升了项目的可维护性、健壮性和开发效率。\n\n*   **全面迁移至 TSX 语法 (`f99c92d`)**:\n    *   为了提升代码的可读性、类型安全和开发体验，我们将项目中所有使用 Vue `h()` 渲染函数的地方，系统性地迁移到了 **TSX** 语法。\n\n*   **后端项目结构现代化 (`f286377`, `3480019`)**:\n    *   对后端核心项目（如 `Workflow`, `AIService`）进行了结构重构，将其拆分为 `.Core` (核心逻辑) 和 `.API` (Web 接口) 等部分，努力实现业务逻辑与宿主环境的解耦。\n    *   引入了新的模块系统抽象，降低了核心模块对 ASP.NET Core 的依赖。\n\n*   **前端通用逻辑抽象与规范化 (`dc75f65`)**:\n    *   为解决插件间存档管理逻辑重复的问题，引入了 `withSaveGameRoot` 高阶组件 (HOC) 进行封装，简化了插件的入口代码。\n    *   统一了前端 `core-services` 的模块导出路径为 `kebab-case` 风格，增强了代码库的一致性。\n\n*   **工作台交互逻辑重构 (`fd3aae4`, `ce7f7dc`)**:\n    *   废弃了原有的、逻辑复杂的 `InlineInputPopover` 组件，采用 `useModal()` 和 **TSX** 动态渲染交互界面，使得配置项操作（新建/重命名等）的代码更内聚、更易于维护。\n\n### 🐛 Bug 修复 (Bug Fixes)\n\n*   **发布 (`38851ca`)**: 解决了单文件发布场景下的编译器警告和资源路径处理问题，提升了兼容性。",
                "description": "Lua 脚本插件。",
                "version": "0.1.2",
                "hash": "ff9643314055ebbbdd7aa483e25434085a4ae3c216e9bb3696c8f7a3e60ce255",
                "url": "https://github.com/Creeper-of-Fire/YAESandBox/releases/download/v0.1.2/YAESandBox.Plugin.LuaScript.zip"
            },
            {
                "id": "YAESandBox.Plugin.TextParser",
                "name": "YAESandBox.Plugin.TextParser",
                "notes": "## YAESandBox v0.1.2 发布日志\n\n本次更新是一个以**代码质量提升**和**内部重构**为核心的维护版本，旨在为未来的功能开发奠定更坚实的基础。我们对前后端代码库进行了多项现代化重构，并修复了若干问题。此外，本次更新也为工作流选择器带来了一项实用的**功能增强**。\n\n### ✨ 功能增强 (Enhancement)\n\n*   **工作流选择器中的 API 预览 (`62c2e61`, `f1315ab`, `becb860`)**\n    *   为工作流引入了初步的**静态分析**能力，现在系统可以分析出工作流对外暴露的事件 API。\n    *   在**工作流选择器**中，用户现在可以方便地预览每个工作流将要发射的事件及其数据结构。这有助于在复用和集成工作流时，更清晰地了解其副作用，做出更准确的选择。\n\n### 🛠️ 重构与代码质量 (Refactoring & Code Quality)\n\n本次发布包含了大量的内部代码重构，虽然这些变化对最终用户是透明的，但它们极大地提升了项目的可维护性、健壮性和开发效率。\n\n*   **全面迁移至 TSX 语法 (`f99c92d`)**:\n    *   为了提升代码的可读性、类型安全和开发体验，我们将项目中所有使用 Vue `h()` 渲染函数的地方，系统性地迁移到了 **TSX** 语法。\n\n*   **后端项目结构现代化 (`f286377`, `3480019`)**:\n    *   对后端核心项目（如 `Workflow`, `AIService`）进行了结构重构，将其拆分为 `.Core` (核心逻辑) 和 `.API` (Web 接口) 等部分，努力实现业务逻辑与宿主环境的解耦。\n    *   引入了新的模块系统抽象，降低了核心模块对 ASP.NET Core 的依赖。\n\n*   **前端通用逻辑抽象与规范化 (`dc75f65`)**:\n    *   为解决插件间存档管理逻辑重复的问题，引入了 `withSaveGameRoot` 高阶组件 (HOC) 进行封装，简化了插件的入口代码。\n    *   统一了前端 `core-services` 的模块导出路径为 `kebab-case` 风格，增强了代码库的一致性。\n\n*   **工作台交互逻辑重构 (`fd3aae4`, `ce7f7dc`)**:\n    *   废弃了原有的、逻辑复杂的 `InlineInputPopover` 组件，采用 `useModal()` 和 **TSX** 动态渲染交互界面，使得配置项操作（新建/重命名等）的代码更内聚、更易于维护。\n\n### 🐛 Bug 修复 (Bug Fixes)\n\n*   **发布 (`38851ca`)**: 解决了单文件发布场景下的编译器警告和资源路径处理问题，提升了兼容性。",
                "description": "文本解析器插件。",
                "version": "0.1.2",
                "hash": "52094e0b188530da2aff402f4511bfcdecd21dc8e9fc3ac29e72999cb0895db4",
                "url": "https://github.com/Creeper-of-Fire/YAESandBox/releases/download/v0.1.2/YAESandBox.Plugin.TextParser.zip"
            },
            {
                "id": "YAESandBox.Plugin.FileSystemConfigProvider",
                "name": "YAESandBox.Plugin.FileSystemConfigProvider",
                "notes": "## YAESandBox v0.1.2 发布日志\n\n本次更新是一个以**代码质量提升**和**内部重构**为核心的维护版本，旨在为未来的功能开发奠定更坚实的基础。我们对前后端代码库进行了多项现代化重构，并修复了若干问题。此外，本次更新也为工作流选择器带来了一项实用的**功能增强**。\n\n### ✨ 功能增强 (Enhancement)\n\n*   **工作流选择器中的 API 预览 (`62c2e61`, `f1315ab`, `becb860`)**\n    *   为工作流引入了初步的**静态分析**能力，现在系统可以分析出工作流对外暴露的事件 API。\n    *   在**工作流选择器**中，用户现在可以方便地预览每个工作流将要发射的事件及其数据结构。这有助于在复用和集成工作流时，更清晰地了解其副作用，做出更准确的选择。\n\n### 🛠️ 重构与代码质量 (Refactoring & Code Quality)\n\n本次发布包含了大量的内部代码重构，虽然这些变化对最终用户是透明的，但它们极大地提升了项目的可维护性、健壮性和开发效率。\n\n*   **全面迁移至 TSX 语法 (`f99c92d`)**:\n    *   为了提升代码的可读性、类型安全和开发体验，我们将项目中所有使用 Vue `h()` 渲染函数的地方，系统性地迁移到了 **TSX** 语法。\n\n*   **后端项目结构现代化 (`f286377`, `3480019`)**:\n    *   对后端核心项目（如 `Workflow`, `AIService`）进行了结构重构，将其拆分为 `.Core` (核心逻辑) 和 `.API` (Web 接口) 等部分，努力实现业务逻辑与宿主环境的解耦。\n    *   引入了新的模块系统抽象，降低了核心模块对 ASP.NET Core 的依赖。\n\n*   **前端通用逻辑抽象与规范化 (`dc75f65`)**:\n    *   为解决插件间存档管理逻辑重复的问题，引入了 `withSaveGameRoot` 高阶组件 (HOC) 进行封装，简化了插件的入口代码。\n    *   统一了前端 `core-services` 的模块导出路径为 `kebab-case` 风格，增强了代码库的一致性。\n\n*   **工作台交互逻辑重构 (`fd3aae4`, `ce7f7dc`)**:\n    *   废弃了原有的、逻辑复杂的 `InlineInputPopover` 组件，采用 `useModal()` 和 **TSX** 动态渲染交互界面，使得配置项操作（新建/重命名等）的代码更内聚、更易于维护。\n\n### 🐛 Bug 修复 (Bug Fixes)\n\n*   **发布 (`38851ca`)**: 解决了单文件发布场景下的编译器警告和资源路径处理问题，提升了兼容性。",
                "description": "获得内置/官方的配置插件。",
                "version": "0.1.2",
                "hash": "1a3d45b843d6aded1c629a634275360debe105adad71f00cf30cb42faa1ed83a",
                "url": "https://github.com/Creeper-of-Fire/YAESandBox/releases/download/v0.1.2/YAESandBox.Plugin.FileSystemConfigProvider.zip"
            }
        ]
    }
}