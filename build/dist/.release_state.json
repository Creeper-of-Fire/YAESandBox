{
    "hashes": {
        "launcher": "e4e868816eb4252aa29c109cf175819c9eb2caacc09e8eec5b3224e1357f144a",
        "app": "f7a4a0f32e2d744c5cbb9da2a93558e99444d638f0d8bbcc2bc8b6f1566dbcfe",
        "backend": "5ebd851937d2ac608f93c57568771555081721a64a416e4a37bc4f208fec12b0",
        "backend-slim": "45323a99622167c3e968bfc7dbdc85cf8838710c41e64c8ae19cc77b2842c36c",
        "plugins": {
            "YAESandBox.Plugin.FileSystemConfigProvider": "902ef050e75bb6da35eedf3738a2bfc1b3de1b0609506e79620aac5e303d4ace",
            "YAESandBox.Plugin.LuaScript": "6fd1086460b2f1ffcace04d32dd3764e949a3230d3a8bae636cad0a23755ad4e",
            "YAESandBox.Plugin.TextParser": "86eb9b1a655fe248601fe72e89c1516f78b515db55d6ecd72bcdbaffc340b24c"
        }
    },
    "manifests": {
        "full": {
            "components": [
                {
                    "id": "launcher",
                    "name": "启动器",
                    "notes": "## v0.0.35 Release Notes\n\n我们很高兴地发布 v0.0.35 版本！本次更新不仅带来了多项期待已久的新功能和架构升级，还**解决了一个潜藏在之前多个版本中的关键缓存问题**，确保所有用户都能顺畅地获取到应用更新。\n\n### ⚠️ **重要提示：首次更新需强制刷新**\n\n在之前的版本中，由于浏览器缓存策略不当，您可能无法自动加载到最新版本的前端应用界面。这个问题在 `v0.0.35` 中已被彻底修复。\n\n为了确保您能应用此修复并接收未来的所有更新，**在更新到此版本后，请务必执行一次强制刷新操作**：\n\n*   在应用窗口内，按下 `Ctrl + Shift + R` (Windows/Linux) 或 `Cmd + Shift + R` (macOS)。\n*   或者使用 `Shift + F5`。\n\n**此操作仅需执行一次**，后续更新将能被自动正确加载。对于此前更新不便带来的糟糕体验，我们深表歉意。\n\n---\n\n### 🐛 修复与优化\n\n*   **解决了前端版本更新不及时的问题（关键修复）**\n    *   通过调整后端静态文件服务器的缓存策略，我们确保了 `index.html` 文件永远不会被浏览器缓存。这意味着每次启动应用时，您都将加载到最新的前端版本，彻底解决了旧版本界面残留的问题。\n\n*   **优化了工作台资源列表的性能**\n    *   重构了全局资源列表项的内部数据流，使其直接从全局状态管理器 (Pinia) 动态获取最新数据。这减少了组件间的 props 传递，提升了 UI 的响应速度和数据一致性。\n\n*   **更新了应用程序图标**\n    *   我们为应用设计并提供了一个更简洁、更具辨识度的新图标。\n\n### ✨ 核心重构与架构升级\n\n*   **全新的配置存储与管理系统**\n    *   在后端引入了统一的 `StoredConfig<T>` 泛型模型，为所有配置增加了对**只读状态**和**元数据**（如描述、标签）的支持，为未来的“模块内置配置”等功能奠定了坚实基础。\n\n*   **工作台核心体验重构与优化**\n    *   重构了编辑器的上下文管理机制，并引入 `useGlobalResources` 可组合函数，统一了全局资源的获取与加载逻辑，使资源面板的数据展示更具响应性和准确性。\n\n### 🚀 新增功能\n\n*   **全局资源标签筛选**\n    *   在工作台的全局资源面板中新增了标签筛选功能，您可以通过标签快速过滤工作流 (Workflow)、Tuum 和符文 (Rune) 等资源。\n\n*   **配置元数据编辑器**\n    *   在工作台侧边栏新增了“配置元数据编辑器”，方便您在编辑配置时，同步修改其描述、标签等元数据。\n\n*   **为“内置配置”提供底层支持（敬请期待！）**\n    *   引入了新的 `FileSystemConfigProviderPlugin` 插件，它为应用支持“项目内置配置”提供了技术基础。虽然此版本暂未捆绑任何内置配置文件，但该功能为我们未来发布官方示例、模板配置铺平了道路，**大家可以期待一下！**\n\n再次感谢您的耐心与支持，希望您喜欢这些更新！\n\n---\n\n**追加说明：为什么要从 v0.0.33 直接跳到 v0.0.35？**\n\n在 `v0.0.34` 版本发布后的几分钟内，我们发现其缓存策略存在严重缺陷，可能会导致用户无法接收到后续更新。为了防止更多用户受到影响，我们迅速撤回了该版本。`v0.0.35` 包含了原计划在 `v0.0.34` 中的所有功能，并紧急修正了该缓存问题，是稳定且推荐的更新版本。我们为这次发布过程中的失误深表歉意。",
                    "description": "应用程序启动器，负责检查更新和启动核心应用。",
                    "version": "0.0.35",
                    "hash": "1ce0dafd346c729cd8c2e2e2b7cad53ff44dcc038922921731f7c4d7f5e8f98b",
                    "url": "https://github.com/Creeper-of-Fire/YAESandBox/releases/download/v0.0.35/launcher.zip"
                },
                {
                    "id": "app",
                    "name": "前端应用",
                    "notes": "### **Release v0.1.1: 重构工作流选择器并改进对话测试插件**\n\n`dialog-test` 插件作为项目早期的测试工具，其功能已逐渐与当前架构脱节，体验不佳。本次补丁更新旨在解决此问题，我们重构了核心的工作流选择器，并对 `dialog-test` 插件进行了现代化改造，修复了其功能陈旧与代码耦合的问题。\n\n#### ♻️ 核心重构 (Refactoring)\n\n*   **工作流选择器**: 已重构为命令式的 Composable (`useFilteredWorkflowSelectorModal`)。这一变更使得在任何需要选择工作流的地方，都可以通过简单的函数调用来弹出一个标准化的选择模态框，极大地提高了组件的复用性和灵活性。\n\n#### ✨ 功能改进 (Improvements)\n\n*   **对话测试插件 (`dialog-test`)**:\n    *   **集成新版选择器**: 替换了旧的、高度耦合的选择器组件，提供了更统一、流畅的使用体验。\n    *   **增强工作流筛选**: 选择器现在会明确提示当前对话场景所期望的输入参数（如 `userInput`, `history`）和标签（如 `chat`），帮助用户更快速地找到合适的工作流。\n    *   **优化流式响应处理**: 引入了 `useStructuredWorkflowStream` Composable 来处理工作流调用和数据流，使其实现方式与项目其他部分保持一致，代码更加健壮。\n    *   **UI 样式优化**: 对话历史和输入框组件现已能更好地适配应用主题，确保了视觉上的一致性。\n\n#### ⚠️ 其他说明 (Notes)\n\n> **请注意**：尽管进行了改进，`dialog-test` 插件的定位仍是一个基础的功能演示与测试页面，其功能较为简单且不包含聊天记录持久化等特性。因此，我们仅建议将其用于快速测试，而非功能完备的日常使用工具。",
                    "description": "YAESandBox 的前端用户界面。",
                    "version": "0.1.1",
                    "hash": "7ab07a6d3ba1967553b9439243a4a25ad6f7f1e7386e895922b4626cdae674c1",
                    "url": "https://github.com/Creeper-of-Fire/YAESandBox/releases/download/v0.1.1/app.zip"
                },
                {
                    "id": "backend",
                    "name": ".NET 后端 (完整版)",
                    "notes": "## YAESandBox v0.1.0 发布说明\n\n> **关于版本号的说明**：从 v0.1.0 开始，本项目将正式采用语义化版本控制（Major.Minor.Patch）方案，以更清晰地反映每次更新的内容和规模。本次更新包含大量新功能与重构，因此我们将其作为首个 `0.1.0` 里程碑版本发布。\n\n这是一个包含大量核心功能增强、开发者体验优化和重要重构的里程碑版本。我们对工作流引擎、脚本环境和前端工作台都进行了深度打磨，为用户带来更强大、更稳定的创作体验。\n\n### 🎉 核心功能与重大更新 (Core Features & Major Updates)\n\n*   **引入引用符文 (🔗 Reference Rune)**\n    *   新增核心的“引用符文”，允许在工作流中通过 `StoreRef` (包含 `RefId` 和 `Version`) 引用并复用已保存的全局符文。\n    *   重构了符文执行接口，将 `ExecuteAsync` 提升至 `IRuneProcessor` 基类，简化了类型结构并统一了执行契约。\n    *   静态分析引擎已异步化 (`AnalyzeAsync`)，能够解析引用符文，并通过**缓存策略**在编辑器中正确显示其输入/输出端口。\n\n*   **符文在线测试功能 (▶️ Rune Testing)**\n    *   前端符文编辑器中新增了“**测试符文**”功能，可以打开一个模态框，即时模拟输入变量、运行单个符文，并直观地查看其输出变量和详细的调试信息。\n    *   新增了后端的符文模拟运行 API (`/mock-run`)，为该功能提供支持。\n\n*   **脚本环境全面增强**\n    *   为 **Lua 脚本**新增了内置的 `toml` 和 `yaml` 全局对象，可直接在脚本中通过 `toml.decode()` 和 `yaml.decode()` 解析这两种数据格式，后端由高性能的 `Tomlyn` 和 `YamlDotNet` 库驱动。\n    *   引入了通用的 `LuaBridgeHelper`，通过 JSON 序列化作为桥梁，将 C# 对象转换为纯 Lua table，从根本上解决了 `userdata` 问题，提升了脚本的健壮性。\n    *   增强了 **Lua 脚本符文**的变量类型解析能力，通过更强大的正则表达式，现已支持多行的 `Record` 结构定义和数组类型 (如 `String[]`)。\n\n*   **新增多种强大的内置符文**\n    *   **✍️ 条件提示词符文**: 继承自提示词符文，但增加了基于 JavaScript 表达式的执行条件。后端使用 `Jint` 引擎安全执行表达式，并使用 `Esprima.NET` 进行精确的静态变量分析。\n    *   **📄 文本模板符文**: 一个通用的模板引擎，支持使用 `{{...}}` 占位符（包括 `{{object.property}}` 路径访问）生成任何文本。\n    *   **🛠️ 模板解析符文**: 通过正则表达式的**命名捕获组**从文本中提取数据，并将其填充到一个 **TOML 模板**中，从而构建出结构化的数据。\n    *   **🔎 值解析符文**: 可通过正则表达式从文本中提取多个字段，并将其转换为字符串、整数、浮点数或布尔值。\n\n### ✨ 功能增强与体验优化 (Enhancements & UX Improvements)\n\n*   **前端工作台 (Workbench)**\n    *   **重构符文图标系统**：为了提供更好的视觉辨识度，对符文图标的实现方式进行了彻底重构。\n        *   **后端**: `ClassLabelAttribute` 扩展了可选的 `Icon` 属性，并将此信息作为 `x-classLabel-icon` 导出到 JSON Schema 中。所有核心符文已更新，将原先硬编码在标签文本中的 Emoji 移至新的 `Icon` 属性。\n        *   **前端**: 新增 `ConfigItemIconRenderer.vue` 组件，用于智能渲染图标。如果符文提供了自定义图标，则显示该图标并附加一个拖拽角标；否则回退显示为标准的拖拽图标。\n    *   新增全局资源配置的**导入/导出**功能，方便配置的备份、迁移与分享。\n    *   为符文操作菜单增加了“**创建副本**”功能，方便快速创建相似配置。\n    *   统一了不同位置的符文选择器逻辑，现在都以**分类树状结构**展示，解决了 UI 不一致的问题。\n    *   增强了变量规格弹窗，现在可以**以树状结构**展示 `Record` 和 `List` 等复杂类型的内部结构。\n    *   动态表单 (SchemaViewer) 现在支持渲染和编辑**对象数组 (array of objects)**，极大地增强了表单的表达能力。\n\n*   **工作流引擎 (Workflow Engine)**\n    *   **🤔 静态变量符文**已全面重构为使用 **TOML 语法**进行解析，废除了旧的自定义解析器，提供了更强大、更标准的变量定义方式。\n    *   为工作流变量添加了**合并功能** (`MergeTuumVar`)，支持对对象和列表进行深层合并，并提供了多种列表合并策略。\n    *   **✍️ 提示词符文**的占位符已从 `[[...]]` 更改为 `{{...}}`，并支持了点符号路径访问。\n\n*   **🚀 新增官方示例工作流**\n    *   本次更新内置了一个名为“**通用生成**”的官方示例工作流 (`通用生成.json`)。\n    *   该工作流综合演示了本次更新的多个核心功能，包括**引用符文**、**条件提示词**、**AI调用**以及利用 **Lua 脚本解析 YAML** 等，是学习和理解新功能的绝佳范例。\n\n### 🐛 问题修复 (Bug Fixes)\n\n*   **后端与插件**:\n    *   修复了 `FileSystemConfigProvider` 插件因错误的 MSBuild 条件判断而**无法正确部署**的问题。\n    *   修复了工作流中的多态类型 (`VarSpecDef`) 未能在 **OpenAPI (Swagger) Schema** 中正确生成的问题。\n*   **前端 UI**:\n    *   修复了在保存全局配置后，左侧资源列表**不会立即刷新**的问题。\n    *   修复了校验状态指示器在无信息时会渲染出一个不可见的“幽灵”元素的问题。\n\n### 🔨 重构与技术改进 (Refactoring & Technical Improvements)\n\n*   **核心类型系统重构**: 对变量类型系统 (`VarSpec`) 进行了大规模重构，将其拆分为 `Primitive`、`Record`、`List` 等具体实现。同时，`Number` 类型被细化为 `Int` 和 `Float`。\n*   **静态分析引擎升级**: 重构了静态分析引擎，实现了**按符文执行顺序进行数据流和类型校验**，使得类型检查更贴近实际执行逻辑，错误定位更准确。\n*   **前端类型安全**: 将配置对象的类型检测逻辑 (`isWorkflow`, `isTuum` 等) 集中到了 `@yaesandbox-frontend/core-services` 中，通过 TypeScript 类型守卫全面增强了类型安全。\n*   **错误持久化**: 引入了可序列化的错误记录 (`SerializableError`)，以支持在工作流执行失败时，将完整的错误信息持久化到存储中。\n*   **符文分类**: 增加了 `RuneCategory` 特性，允许为符文指定分类，并在前端以树状结构展示，优化了符文的组织和查找。\n\n### 🔧 开发者体验与工具 (Developer Experience & Tooling)\n\n*   **发布工具重构**: 原有的单一发布脚本 `release_helper.py` 已被完全重构为一个模块化的 Python 工具包 `release_tool`，极大地提高了可维护性和可扩展性。\n*   `pnpm` 版本已更新至 `10.19.0`。\n\n",
                    "description": ".NET 后端。",
                    "version": "0.1.0",
                    "hash": "839901c5be4d4901a4aa77d59cc1356b6a9d92cb2f09d12c712713a257b064e2",
                    "url": "https://github.com/Creeper-of-Fire/YAESandBox/releases/download/v0.1.0/backend.zip"
                }
            ]
        },
        "slim": {
            "components": [
                {
                    "id": "launcher",
                    "name": "启动器",
                    "notes": "## v0.0.35 Release Notes\n\n我们很高兴地发布 v0.0.35 版本！本次更新不仅带来了多项期待已久的新功能和架构升级，还**解决了一个潜藏在之前多个版本中的关键缓存问题**，确保所有用户都能顺畅地获取到应用更新。\n\n### ⚠️ **重要提示：首次更新需强制刷新**\n\n在之前的版本中，由于浏览器缓存策略不当，您可能无法自动加载到最新版本的前端应用界面。这个问题在 `v0.0.35` 中已被彻底修复。\n\n为了确保您能应用此修复并接收未来的所有更新，**在更新到此版本后，请务必执行一次强制刷新操作**：\n\n*   在应用窗口内，按下 `Ctrl + Shift + R` (Windows/Linux) 或 `Cmd + Shift + R` (macOS)。\n*   或者使用 `Shift + F5`。\n\n**此操作仅需执行一次**，后续更新将能被自动正确加载。对于此前更新不便带来的糟糕体验，我们深表歉意。\n\n---\n\n### 🐛 修复与优化\n\n*   **解决了前端版本更新不及时的问题（关键修复）**\n    *   通过调整后端静态文件服务器的缓存策略，我们确保了 `index.html` 文件永远不会被浏览器缓存。这意味着每次启动应用时，您都将加载到最新的前端版本，彻底解决了旧版本界面残留的问题。\n\n*   **优化了工作台资源列表的性能**\n    *   重构了全局资源列表项的内部数据流，使其直接从全局状态管理器 (Pinia) 动态获取最新数据。这减少了组件间的 props 传递，提升了 UI 的响应速度和数据一致性。\n\n*   **更新了应用程序图标**\n    *   我们为应用设计并提供了一个更简洁、更具辨识度的新图标。\n\n### ✨ 核心重构与架构升级\n\n*   **全新的配置存储与管理系统**\n    *   在后端引入了统一的 `StoredConfig<T>` 泛型模型，为所有配置增加了对**只读状态**和**元数据**（如描述、标签）的支持，为未来的“模块内置配置”等功能奠定了坚实基础。\n\n*   **工作台核心体验重构与优化**\n    *   重构了编辑器的上下文管理机制，并引入 `useGlobalResources` 可组合函数，统一了全局资源的获取与加载逻辑，使资源面板的数据展示更具响应性和准确性。\n\n### 🚀 新增功能\n\n*   **全局资源标签筛选**\n    *   在工作台的全局资源面板中新增了标签筛选功能，您可以通过标签快速过滤工作流 (Workflow)、Tuum 和符文 (Rune) 等资源。\n\n*   **配置元数据编辑器**\n    *   在工作台侧边栏新增了“配置元数据编辑器”，方便您在编辑配置时，同步修改其描述、标签等元数据。\n\n*   **为“内置配置”提供底层支持（敬请期待！）**\n    *   引入了新的 `FileSystemConfigProviderPlugin` 插件，它为应用支持“项目内置配置”提供了技术基础。虽然此版本暂未捆绑任何内置配置文件，但该功能为我们未来发布官方示例、模板配置铺平了道路，**大家可以期待一下！**\n\n再次感谢您的耐心与支持，希望您喜欢这些更新！\n\n---\n\n**追加说明：为什么要从 v0.0.33 直接跳到 v0.0.35？**\n\n在 `v0.0.34` 版本发布后的几分钟内，我们发现其缓存策略存在严重缺陷，可能会导致用户无法接收到后续更新。为了防止更多用户受到影响，我们迅速撤回了该版本。`v0.0.35` 包含了原计划在 `v0.0.34` 中的所有功能，并紧急修正了该缓存问题，是稳定且推荐的更新版本。我们为这次发布过程中的失误深表歉意。",
                    "description": "应用程序启动器，负责检查更新和启动核心应用。",
                    "version": "0.0.35",
                    "hash": "1ce0dafd346c729cd8c2e2e2b7cad53ff44dcc038922921731f7c4d7f5e8f98b",
                    "url": "https://github.com/Creeper-of-Fire/YAESandBox/releases/download/v0.0.35/launcher.zip"
                },
                {
                    "id": "app",
                    "name": "前端应用",
                    "notes": "### **Release v0.1.1: 重构工作流选择器并改进对话测试插件**\n\n`dialog-test` 插件作为项目早期的测试工具，其功能已逐渐与当前架构脱节，体验不佳。本次补丁更新旨在解决此问题，我们重构了核心的工作流选择器，并对 `dialog-test` 插件进行了现代化改造，修复了其功能陈旧与代码耦合的问题。\n\n#### ♻️ 核心重构 (Refactoring)\n\n*   **工作流选择器**: 已重构为命令式的 Composable (`useFilteredWorkflowSelectorModal`)。这一变更使得在任何需要选择工作流的地方，都可以通过简单的函数调用来弹出一个标准化的选择模态框，极大地提高了组件的复用性和灵活性。\n\n#### ✨ 功能改进 (Improvements)\n\n*   **对话测试插件 (`dialog-test`)**:\n    *   **集成新版选择器**: 替换了旧的、高度耦合的选择器组件，提供了更统一、流畅的使用体验。\n    *   **增强工作流筛选**: 选择器现在会明确提示当前对话场景所期望的输入参数（如 `userInput`, `history`）和标签（如 `chat`），帮助用户更快速地找到合适的工作流。\n    *   **优化流式响应处理**: 引入了 `useStructuredWorkflowStream` Composable 来处理工作流调用和数据流，使其实现方式与项目其他部分保持一致，代码更加健壮。\n    *   **UI 样式优化**: 对话历史和输入框组件现已能更好地适配应用主题，确保了视觉上的一致性。\n\n#### ⚠️ 其他说明 (Notes)\n\n> **请注意**：尽管进行了改进，`dialog-test` 插件的定位仍是一个基础的功能演示与测试页面，其功能较为简单且不包含聊天记录持久化等特性。因此，我们仅建议将其用于快速测试，而非功能完备的日常使用工具。",
                    "description": "YAESandBox 的前端用户界面。",
                    "version": "0.1.1",
                    "hash": "7ab07a6d3ba1967553b9439243a4a25ad6f7f1e7386e895922b4626cdae674c1",
                    "url": "https://github.com/Creeper-of-Fire/YAESandBox/releases/download/v0.1.1/app.zip"
                },
                {
                    "id": "backend",
                    "name": ".NET 后端 (精简版)",
                    "notes": "## YAESandBox v0.1.0 发布说明\n\n> **关于版本号的说明**：从 v0.1.0 开始，本项目将正式采用语义化版本控制（Major.Minor.Patch）方案，以更清晰地反映每次更新的内容和规模。本次更新包含大量新功能与重构，因此我们将其作为首个 `0.1.0` 里程碑版本发布。\n\n这是一个包含大量核心功能增强、开发者体验优化和重要重构的里程碑版本。我们对工作流引擎、脚本环境和前端工作台都进行了深度打磨，为用户带来更强大、更稳定的创作体验。\n\n### 🎉 核心功能与重大更新 (Core Features & Major Updates)\n\n*   **引入引用符文 (🔗 Reference Rune)**\n    *   新增核心的“引用符文”，允许在工作流中通过 `StoreRef` (包含 `RefId` 和 `Version`) 引用并复用已保存的全局符文。\n    *   重构了符文执行接口，将 `ExecuteAsync` 提升至 `IRuneProcessor` 基类，简化了类型结构并统一了执行契约。\n    *   静态分析引擎已异步化 (`AnalyzeAsync`)，能够解析引用符文，并通过**缓存策略**在编辑器中正确显示其输入/输出端口。\n\n*   **符文在线测试功能 (▶️ Rune Testing)**\n    *   前端符文编辑器中新增了“**测试符文**”功能，可以打开一个模态框，即时模拟输入变量、运行单个符文，并直观地查看其输出变量和详细的调试信息。\n    *   新增了后端的符文模拟运行 API (`/mock-run`)，为该功能提供支持。\n\n*   **脚本环境全面增强**\n    *   为 **Lua 脚本**新增了内置的 `toml` 和 `yaml` 全局对象，可直接在脚本中通过 `toml.decode()` 和 `yaml.decode()` 解析这两种数据格式，后端由高性能的 `Tomlyn` 和 `YamlDotNet` 库驱动。\n    *   引入了通用的 `LuaBridgeHelper`，通过 JSON 序列化作为桥梁，将 C# 对象转换为纯 Lua table，从根本上解决了 `userdata` 问题，提升了脚本的健壮性。\n    *   增强了 **Lua 脚本符文**的变量类型解析能力，通过更强大的正则表达式，现已支持多行的 `Record` 结构定义和数组类型 (如 `String[]`)。\n\n*   **新增多种强大的内置符文**\n    *   **✍️ 条件提示词符文**: 继承自提示词符文，但增加了基于 JavaScript 表达式的执行条件。后端使用 `Jint` 引擎安全执行表达式，并使用 `Esprima.NET` 进行精确的静态变量分析。\n    *   **📄 文本模板符文**: 一个通用的模板引擎，支持使用 `{{...}}` 占位符（包括 `{{object.property}}` 路径访问）生成任何文本。\n    *   **🛠️ 模板解析符文**: 通过正则表达式的**命名捕获组**从文本中提取数据，并将其填充到一个 **TOML 模板**中，从而构建出结构化的数据。\n    *   **🔎 值解析符文**: 可通过正则表达式从文本中提取多个字段，并将其转换为字符串、整数、浮点数或布尔值。\n\n### ✨ 功能增强与体验优化 (Enhancements & UX Improvements)\n\n*   **前端工作台 (Workbench)**\n    *   **重构符文图标系统**：为了提供更好的视觉辨识度，对符文图标的实现方式进行了彻底重构。\n        *   **后端**: `ClassLabelAttribute` 扩展了可选的 `Icon` 属性，并将此信息作为 `x-classLabel-icon` 导出到 JSON Schema 中。所有核心符文已更新，将原先硬编码在标签文本中的 Emoji 移至新的 `Icon` 属性。\n        *   **前端**: 新增 `ConfigItemIconRenderer.vue` 组件，用于智能渲染图标。如果符文提供了自定义图标，则显示该图标并附加一个拖拽角标；否则回退显示为标准的拖拽图标。\n    *   新增全局资源配置的**导入/导出**功能，方便配置的备份、迁移与分享。\n    *   为符文操作菜单增加了“**创建副本**”功能，方便快速创建相似配置。\n    *   统一了不同位置的符文选择器逻辑，现在都以**分类树状结构**展示，解决了 UI 不一致的问题。\n    *   增强了变量规格弹窗，现在可以**以树状结构**展示 `Record` 和 `List` 等复杂类型的内部结构。\n    *   动态表单 (SchemaViewer) 现在支持渲染和编辑**对象数组 (array of objects)**，极大地增强了表单的表达能力。\n\n*   **工作流引擎 (Workflow Engine)**\n    *   **🤔 静态变量符文**已全面重构为使用 **TOML 语法**进行解析，废除了旧的自定义解析器，提供了更强大、更标准的变量定义方式。\n    *   为工作流变量添加了**合并功能** (`MergeTuumVar`)，支持对对象和列表进行深层合并，并提供了多种列表合并策略。\n    *   **✍️ 提示词符文**的占位符已从 `[[...]]` 更改为 `{{...}}`，并支持了点符号路径访问。\n\n*   **🚀 新增官方示例工作流**\n    *   本次更新内置了一个名为“**通用生成**”的官方示例工作流 (`通用生成.json`)。\n    *   该工作流综合演示了本次更新的多个核心功能，包括**引用符文**、**条件提示词**、**AI调用**以及利用 **Lua 脚本解析 YAML** 等，是学习和理解新功能的绝佳范例。\n\n### 🐛 问题修复 (Bug Fixes)\n\n*   **后端与插件**:\n    *   修复了 `FileSystemConfigProvider` 插件因错误的 MSBuild 条件判断而**无法正确部署**的问题。\n    *   修复了工作流中的多态类型 (`VarSpecDef`) 未能在 **OpenAPI (Swagger) Schema** 中正确生成的问题。\n*   **前端 UI**:\n    *   修复了在保存全局配置后，左侧资源列表**不会立即刷新**的问题。\n    *   修复了校验状态指示器在无信息时会渲染出一个不可见的“幽灵”元素的问题。\n\n### 🔨 重构与技术改进 (Refactoring & Technical Improvements)\n\n*   **核心类型系统重构**: 对变量类型系统 (`VarSpec`) 进行了大规模重构，将其拆分为 `Primitive`、`Record`、`List` 等具体实现。同时，`Number` 类型被细化为 `Int` 和 `Float`。\n*   **静态分析引擎升级**: 重构了静态分析引擎，实现了**按符文执行顺序进行数据流和类型校验**，使得类型检查更贴近实际执行逻辑，错误定位更准确。\n*   **前端类型安全**: 将配置对象的类型检测逻辑 (`isWorkflow`, `isTuum` 等) 集中到了 `@yaesandbox-frontend/core-services` 中，通过 TypeScript 类型守卫全面增强了类型安全。\n*   **错误持久化**: 引入了可序列化的错误记录 (`SerializableError`)，以支持在工作流执行失败时，将完整的错误信息持久化到存储中。\n*   **符文分类**: 增加了 `RuneCategory` 特性，允许为符文指定分类，并在前端以树状结构展示，优化了符文的组织和查找。\n\n### 🔧 开发者体验与工具 (Developer Experience & Tooling)\n\n*   **发布工具重构**: 原有的单一发布脚本 `release_helper.py` 已被完全重构为一个模块化的 Python 工具包 `release_tool`，极大地提高了可维护性和可扩展性。\n*   `pnpm` 版本已更新至 `10.19.0`。\n\n",
                    "description": ".NET 后端。",
                    "version": "0.1.0",
                    "hash": "282b022221403c0f9ad6f4d2f907df7491e37d28e925cbfe264462e3ea0188ba",
                    "url": "https://github.com/Creeper-of-Fire/YAESandBox/releases/download/v0.1.0/backend-slim.zip"
                }
            ]
        },
        "plugins": [
            {
                "id": "YAESandBox.Plugin.LuaScript",
                "name": "YAESandBox.Plugin.LuaScript",
                "notes": "## YAESandBox v0.1.0 发布说明\n\n> **关于版本号的说明**：从 v0.1.0 开始，本项目将正式采用语义化版本控制（Major.Minor.Patch）方案，以更清晰地反映每次更新的内容和规模。本次更新包含大量新功能与重构，因此我们将其作为首个 `0.1.0` 里程碑版本发布。\n\n这是一个包含大量核心功能增强、开发者体验优化和重要重构的里程碑版本。我们对工作流引擎、脚本环境和前端工作台都进行了深度打磨，为用户带来更强大、更稳定的创作体验。\n\n### 🎉 核心功能与重大更新 (Core Features & Major Updates)\n\n*   **引入引用符文 (🔗 Reference Rune)**\n    *   新增核心的“引用符文”，允许在工作流中通过 `StoreRef` (包含 `RefId` 和 `Version`) 引用并复用已保存的全局符文。\n    *   重构了符文执行接口，将 `ExecuteAsync` 提升至 `IRuneProcessor` 基类，简化了类型结构并统一了执行契约。\n    *   静态分析引擎已异步化 (`AnalyzeAsync`)，能够解析引用符文，并通过**缓存策略**在编辑器中正确显示其输入/输出端口。\n\n*   **符文在线测试功能 (▶️ Rune Testing)**\n    *   前端符文编辑器中新增了“**测试符文**”功能，可以打开一个模态框，即时模拟输入变量、运行单个符文，并直观地查看其输出变量和详细的调试信息。\n    *   新增了后端的符文模拟运行 API (`/mock-run`)，为该功能提供支持。\n\n*   **脚本环境全面增强**\n    *   为 **Lua 脚本**新增了内置的 `toml` 和 `yaml` 全局对象，可直接在脚本中通过 `toml.decode()` 和 `yaml.decode()` 解析这两种数据格式，后端由高性能的 `Tomlyn` 和 `YamlDotNet` 库驱动。\n    *   引入了通用的 `LuaBridgeHelper`，通过 JSON 序列化作为桥梁，将 C# 对象转换为纯 Lua table，从根本上解决了 `userdata` 问题，提升了脚本的健壮性。\n    *   增强了 **Lua 脚本符文**的变量类型解析能力，通过更强大的正则表达式，现已支持多行的 `Record` 结构定义和数组类型 (如 `String[]`)。\n\n*   **新增多种强大的内置符文**\n    *   **✍️ 条件提示词符文**: 继承自提示词符文，但增加了基于 JavaScript 表达式的执行条件。后端使用 `Jint` 引擎安全执行表达式，并使用 `Esprima.NET` 进行精确的静态变量分析。\n    *   **📄 文本模板符文**: 一个通用的模板引擎，支持使用 `{{...}}` 占位符（包括 `{{object.property}}` 路径访问）生成任何文本。\n    *   **🛠️ 模板解析符文**: 通过正则表达式的**命名捕获组**从文本中提取数据，并将其填充到一个 **TOML 模板**中，从而构建出结构化的数据。\n    *   **🔎 值解析符文**: 可通过正则表达式从文本中提取多个字段，并将其转换为字符串、整数、浮点数或布尔值。\n\n### ✨ 功能增强与体验优化 (Enhancements & UX Improvements)\n\n*   **前端工作台 (Workbench)**\n    *   **重构符文图标系统**：为了提供更好的视觉辨识度，对符文图标的实现方式进行了彻底重构。\n        *   **后端**: `ClassLabelAttribute` 扩展了可选的 `Icon` 属性，并将此信息作为 `x-classLabel-icon` 导出到 JSON Schema 中。所有核心符文已更新，将原先硬编码在标签文本中的 Emoji 移至新的 `Icon` 属性。\n        *   **前端**: 新增 `ConfigItemIconRenderer.vue` 组件，用于智能渲染图标。如果符文提供了自定义图标，则显示该图标并附加一个拖拽角标；否则回退显示为标准的拖拽图标。\n    *   新增全局资源配置的**导入/导出**功能，方便配置的备份、迁移与分享。\n    *   为符文操作菜单增加了“**创建副本**”功能，方便快速创建相似配置。\n    *   统一了不同位置的符文选择器逻辑，现在都以**分类树状结构**展示，解决了 UI 不一致的问题。\n    *   增强了变量规格弹窗，现在可以**以树状结构**展示 `Record` 和 `List` 等复杂类型的内部结构。\n    *   动态表单 (SchemaViewer) 现在支持渲染和编辑**对象数组 (array of objects)**，极大地增强了表单的表达能力。\n\n*   **工作流引擎 (Workflow Engine)**\n    *   **🤔 静态变量符文**已全面重构为使用 **TOML 语法**进行解析，废除了旧的自定义解析器，提供了更强大、更标准的变量定义方式。\n    *   为工作流变量添加了**合并功能** (`MergeTuumVar`)，支持对对象和列表进行深层合并，并提供了多种列表合并策略。\n    *   **✍️ 提示词符文**的占位符已从 `[[...]]` 更改为 `{{...}}`，并支持了点符号路径访问。\n\n*   **🚀 新增官方示例工作流**\n    *   本次更新内置了一个名为“**通用生成**”的官方示例工作流 (`通用生成.json`)。\n    *   该工作流综合演示了本次更新的多个核心功能，包括**引用符文**、**条件提示词**、**AI调用**以及利用 **Lua 脚本解析 YAML** 等，是学习和理解新功能的绝佳范例。\n\n### 🐛 问题修复 (Bug Fixes)\n\n*   **后端与插件**:\n    *   修复了 `FileSystemConfigProvider` 插件因错误的 MSBuild 条件判断而**无法正确部署**的问题。\n    *   修复了工作流中的多态类型 (`VarSpecDef`) 未能在 **OpenAPI (Swagger) Schema** 中正确生成的问题。\n*   **前端 UI**:\n    *   修复了在保存全局配置后，左侧资源列表**不会立即刷新**的问题。\n    *   修复了校验状态指示器在无信息时会渲染出一个不可见的“幽灵”元素的问题。\n\n### 🔨 重构与技术改进 (Refactoring & Technical Improvements)\n\n*   **核心类型系统重构**: 对变量类型系统 (`VarSpec`) 进行了大规模重构，将其拆分为 `Primitive`、`Record`、`List` 等具体实现。同时，`Number` 类型被细化为 `Int` 和 `Float`。\n*   **静态分析引擎升级**: 重构了静态分析引擎，实现了**按符文执行顺序进行数据流和类型校验**，使得类型检查更贴近实际执行逻辑，错误定位更准确。\n*   **前端类型安全**: 将配置对象的类型检测逻辑 (`isWorkflow`, `isTuum` 等) 集中到了 `@yaesandbox-frontend/core-services` 中，通过 TypeScript 类型守卫全面增强了类型安全。\n*   **错误持久化**: 引入了可序列化的错误记录 (`SerializableError`)，以支持在工作流执行失败时，将完整的错误信息持久化到存储中。\n*   **符文分类**: 增加了 `RuneCategory` 特性，允许为符文指定分类，并在前端以树状结构展示，优化了符文的组织和查找。\n\n### 🔧 开发者体验与工具 (Developer Experience & Tooling)\n\n*   **发布工具重构**: 原有的单一发布脚本 `release_helper.py` 已被完全重构为一个模块化的 Python 工具包 `release_tool`，极大地提高了可维护性和可扩展性。\n*   `pnpm` 版本已更新至 `10.19.0`。\n\n",
                "description": "Lua 脚本插件。",
                "version": "0.1.0",
                "hash": "be6bf9498365603954af3f3f306f7e64c228160ba3b8a07104f23ef0ea22ddb2",
                "url": "https://github.com/Creeper-of-Fire/YAESandBox/releases/download/v0.1.0/YAESandBox.Plugin.LuaScript.zip"
            },
            {
                "id": "YAESandBox.Plugin.TextParser",
                "name": "YAESandBox.Plugin.TextParser",
                "notes": "## YAESandBox v0.1.0 发布说明\n\n> **关于版本号的说明**：从 v0.1.0 开始，本项目将正式采用语义化版本控制（Major.Minor.Patch）方案，以更清晰地反映每次更新的内容和规模。本次更新包含大量新功能与重构，因此我们将其作为首个 `0.1.0` 里程碑版本发布。\n\n这是一个包含大量核心功能增强、开发者体验优化和重要重构的里程碑版本。我们对工作流引擎、脚本环境和前端工作台都进行了深度打磨，为用户带来更强大、更稳定的创作体验。\n\n### 🎉 核心功能与重大更新 (Core Features & Major Updates)\n\n*   **引入引用符文 (🔗 Reference Rune)**\n    *   新增核心的“引用符文”，允许在工作流中通过 `StoreRef` (包含 `RefId` 和 `Version`) 引用并复用已保存的全局符文。\n    *   重构了符文执行接口，将 `ExecuteAsync` 提升至 `IRuneProcessor` 基类，简化了类型结构并统一了执行契约。\n    *   静态分析引擎已异步化 (`AnalyzeAsync`)，能够解析引用符文，并通过**缓存策略**在编辑器中正确显示其输入/输出端口。\n\n*   **符文在线测试功能 (▶️ Rune Testing)**\n    *   前端符文编辑器中新增了“**测试符文**”功能，可以打开一个模态框，即时模拟输入变量、运行单个符文，并直观地查看其输出变量和详细的调试信息。\n    *   新增了后端的符文模拟运行 API (`/mock-run`)，为该功能提供支持。\n\n*   **脚本环境全面增强**\n    *   为 **Lua 脚本**新增了内置的 `toml` 和 `yaml` 全局对象，可直接在脚本中通过 `toml.decode()` 和 `yaml.decode()` 解析这两种数据格式，后端由高性能的 `Tomlyn` 和 `YamlDotNet` 库驱动。\n    *   引入了通用的 `LuaBridgeHelper`，通过 JSON 序列化作为桥梁，将 C# 对象转换为纯 Lua table，从根本上解决了 `userdata` 问题，提升了脚本的健壮性。\n    *   增强了 **Lua 脚本符文**的变量类型解析能力，通过更强大的正则表达式，现已支持多行的 `Record` 结构定义和数组类型 (如 `String[]`)。\n\n*   **新增多种强大的内置符文**\n    *   **✍️ 条件提示词符文**: 继承自提示词符文，但增加了基于 JavaScript 表达式的执行条件。后端使用 `Jint` 引擎安全执行表达式，并使用 `Esprima.NET` 进行精确的静态变量分析。\n    *   **📄 文本模板符文**: 一个通用的模板引擎，支持使用 `{{...}}` 占位符（包括 `{{object.property}}` 路径访问）生成任何文本。\n    *   **🛠️ 模板解析符文**: 通过正则表达式的**命名捕获组**从文本中提取数据，并将其填充到一个 **TOML 模板**中，从而构建出结构化的数据。\n    *   **🔎 值解析符文**: 可通过正则表达式从文本中提取多个字段，并将其转换为字符串、整数、浮点数或布尔值。\n\n### ✨ 功能增强与体验优化 (Enhancements & UX Improvements)\n\n*   **前端工作台 (Workbench)**\n    *   **重构符文图标系统**：为了提供更好的视觉辨识度，对符文图标的实现方式进行了彻底重构。\n        *   **后端**: `ClassLabelAttribute` 扩展了可选的 `Icon` 属性，并将此信息作为 `x-classLabel-icon` 导出到 JSON Schema 中。所有核心符文已更新，将原先硬编码在标签文本中的 Emoji 移至新的 `Icon` 属性。\n        *   **前端**: 新增 `ConfigItemIconRenderer.vue` 组件，用于智能渲染图标。如果符文提供了自定义图标，则显示该图标并附加一个拖拽角标；否则回退显示为标准的拖拽图标。\n    *   新增全局资源配置的**导入/导出**功能，方便配置的备份、迁移与分享。\n    *   为符文操作菜单增加了“**创建副本**”功能，方便快速创建相似配置。\n    *   统一了不同位置的符文选择器逻辑，现在都以**分类树状结构**展示，解决了 UI 不一致的问题。\n    *   增强了变量规格弹窗，现在可以**以树状结构**展示 `Record` 和 `List` 等复杂类型的内部结构。\n    *   动态表单 (SchemaViewer) 现在支持渲染和编辑**对象数组 (array of objects)**，极大地增强了表单的表达能力。\n\n*   **工作流引擎 (Workflow Engine)**\n    *   **🤔 静态变量符文**已全面重构为使用 **TOML 语法**进行解析，废除了旧的自定义解析器，提供了更强大、更标准的变量定义方式。\n    *   为工作流变量添加了**合并功能** (`MergeTuumVar`)，支持对对象和列表进行深层合并，并提供了多种列表合并策略。\n    *   **✍️ 提示词符文**的占位符已从 `[[...]]` 更改为 `{{...}}`，并支持了点符号路径访问。\n\n*   **🚀 新增官方示例工作流**\n    *   本次更新内置了一个名为“**通用生成**”的官方示例工作流 (`通用生成.json`)。\n    *   该工作流综合演示了本次更新的多个核心功能，包括**引用符文**、**条件提示词**、**AI调用**以及利用 **Lua 脚本解析 YAML** 等，是学习和理解新功能的绝佳范例。\n\n### 🐛 问题修复 (Bug Fixes)\n\n*   **后端与插件**:\n    *   修复了 `FileSystemConfigProvider` 插件因错误的 MSBuild 条件判断而**无法正确部署**的问题。\n    *   修复了工作流中的多态类型 (`VarSpecDef`) 未能在 **OpenAPI (Swagger) Schema** 中正确生成的问题。\n*   **前端 UI**:\n    *   修复了在保存全局配置后，左侧资源列表**不会立即刷新**的问题。\n    *   修复了校验状态指示器在无信息时会渲染出一个不可见的“幽灵”元素的问题。\n\n### 🔨 重构与技术改进 (Refactoring & Technical Improvements)\n\n*   **核心类型系统重构**: 对变量类型系统 (`VarSpec`) 进行了大规模重构，将其拆分为 `Primitive`、`Record`、`List` 等具体实现。同时，`Number` 类型被细化为 `Int` 和 `Float`。\n*   **静态分析引擎升级**: 重构了静态分析引擎，实现了**按符文执行顺序进行数据流和类型校验**，使得类型检查更贴近实际执行逻辑，错误定位更准确。\n*   **前端类型安全**: 将配置对象的类型检测逻辑 (`isWorkflow`, `isTuum` 等) 集中到了 `@yaesandbox-frontend/core-services` 中，通过 TypeScript 类型守卫全面增强了类型安全。\n*   **错误持久化**: 引入了可序列化的错误记录 (`SerializableError`)，以支持在工作流执行失败时，将完整的错误信息持久化到存储中。\n*   **符文分类**: 增加了 `RuneCategory` 特性，允许为符文指定分类，并在前端以树状结构展示，优化了符文的组织和查找。\n\n### 🔧 开发者体验与工具 (Developer Experience & Tooling)\n\n*   **发布工具重构**: 原有的单一发布脚本 `release_helper.py` 已被完全重构为一个模块化的 Python 工具包 `release_tool`，极大地提高了可维护性和可扩展性。\n*   `pnpm` 版本已更新至 `10.19.0`。\n\n",
                "description": "文本解析器插件。",
                "version": "0.1.0",
                "hash": "af8824240c8577420c1ae61148403f0f4ef0d956353931caf4596f12c42bdb49",
                "url": "https://github.com/Creeper-of-Fire/YAESandBox/releases/download/v0.1.0/YAESandBox.Plugin.TextParser.zip"
            },
            {
                "id": "YAESandBox.Plugin.FileSystemConfigProvider",
                "name": "YAESandBox.Plugin.FileSystemConfigProvider",
                "notes": "## YAESandBox v0.1.0 发布说明\n\n> **关于版本号的说明**：从 v0.1.0 开始，本项目将正式采用语义化版本控制（Major.Minor.Patch）方案，以更清晰地反映每次更新的内容和规模。本次更新包含大量新功能与重构，因此我们将其作为首个 `0.1.0` 里程碑版本发布。\n\n这是一个包含大量核心功能增强、开发者体验优化和重要重构的里程碑版本。我们对工作流引擎、脚本环境和前端工作台都进行了深度打磨，为用户带来更强大、更稳定的创作体验。\n\n### 🎉 核心功能与重大更新 (Core Features & Major Updates)\n\n*   **引入引用符文 (🔗 Reference Rune)**\n    *   新增核心的“引用符文”，允许在工作流中通过 `StoreRef` (包含 `RefId` 和 `Version`) 引用并复用已保存的全局符文。\n    *   重构了符文执行接口，将 `ExecuteAsync` 提升至 `IRuneProcessor` 基类，简化了类型结构并统一了执行契约。\n    *   静态分析引擎已异步化 (`AnalyzeAsync`)，能够解析引用符文，并通过**缓存策略**在编辑器中正确显示其输入/输出端口。\n\n*   **符文在线测试功能 (▶️ Rune Testing)**\n    *   前端符文编辑器中新增了“**测试符文**”功能，可以打开一个模态框，即时模拟输入变量、运行单个符文，并直观地查看其输出变量和详细的调试信息。\n    *   新增了后端的符文模拟运行 API (`/mock-run`)，为该功能提供支持。\n\n*   **脚本环境全面增强**\n    *   为 **Lua 脚本**新增了内置的 `toml` 和 `yaml` 全局对象，可直接在脚本中通过 `toml.decode()` 和 `yaml.decode()` 解析这两种数据格式，后端由高性能的 `Tomlyn` 和 `YamlDotNet` 库驱动。\n    *   引入了通用的 `LuaBridgeHelper`，通过 JSON 序列化作为桥梁，将 C# 对象转换为纯 Lua table，从根本上解决了 `userdata` 问题，提升了脚本的健壮性。\n    *   增强了 **Lua 脚本符文**的变量类型解析能力，通过更强大的正则表达式，现已支持多行的 `Record` 结构定义和数组类型 (如 `String[]`)。\n\n*   **新增多种强大的内置符文**\n    *   **✍️ 条件提示词符文**: 继承自提示词符文，但增加了基于 JavaScript 表达式的执行条件。后端使用 `Jint` 引擎安全执行表达式，并使用 `Esprima.NET` 进行精确的静态变量分析。\n    *   **📄 文本模板符文**: 一个通用的模板引擎，支持使用 `{{...}}` 占位符（包括 `{{object.property}}` 路径访问）生成任何文本。\n    *   **🛠️ 模板解析符文**: 通过正则表达式的**命名捕获组**从文本中提取数据，并将其填充到一个 **TOML 模板**中，从而构建出结构化的数据。\n    *   **🔎 值解析符文**: 可通过正则表达式从文本中提取多个字段，并将其转换为字符串、整数、浮点数或布尔值。\n\n### ✨ 功能增强与体验优化 (Enhancements & UX Improvements)\n\n*   **前端工作台 (Workbench)**\n    *   **重构符文图标系统**：为了提供更好的视觉辨识度，对符文图标的实现方式进行了彻底重构。\n        *   **后端**: `ClassLabelAttribute` 扩展了可选的 `Icon` 属性，并将此信息作为 `x-classLabel-icon` 导出到 JSON Schema 中。所有核心符文已更新，将原先硬编码在标签文本中的 Emoji 移至新的 `Icon` 属性。\n        *   **前端**: 新增 `ConfigItemIconRenderer.vue` 组件，用于智能渲染图标。如果符文提供了自定义图标，则显示该图标并附加一个拖拽角标；否则回退显示为标准的拖拽图标。\n    *   新增全局资源配置的**导入/导出**功能，方便配置的备份、迁移与分享。\n    *   为符文操作菜单增加了“**创建副本**”功能，方便快速创建相似配置。\n    *   统一了不同位置的符文选择器逻辑，现在都以**分类树状结构**展示，解决了 UI 不一致的问题。\n    *   增强了变量规格弹窗，现在可以**以树状结构**展示 `Record` 和 `List` 等复杂类型的内部结构。\n    *   动态表单 (SchemaViewer) 现在支持渲染和编辑**对象数组 (array of objects)**，极大地增强了表单的表达能力。\n\n*   **工作流引擎 (Workflow Engine)**\n    *   **🤔 静态变量符文**已全面重构为使用 **TOML 语法**进行解析，废除了旧的自定义解析器，提供了更强大、更标准的变量定义方式。\n    *   为工作流变量添加了**合并功能** (`MergeTuumVar`)，支持对对象和列表进行深层合并，并提供了多种列表合并策略。\n    *   **✍️ 提示词符文**的占位符已从 `[[...]]` 更改为 `{{...}}`，并支持了点符号路径访问。\n\n*   **🚀 新增官方示例工作流**\n    *   本次更新内置了一个名为“**通用生成**”的官方示例工作流 (`通用生成.json`)。\n    *   该工作流综合演示了本次更新的多个核心功能，包括**引用符文**、**条件提示词**、**AI调用**以及利用 **Lua 脚本解析 YAML** 等，是学习和理解新功能的绝佳范例。\n\n### 🐛 问题修复 (Bug Fixes)\n\n*   **后端与插件**:\n    *   修复了 `FileSystemConfigProvider` 插件因错误的 MSBuild 条件判断而**无法正确部署**的问题。\n    *   修复了工作流中的多态类型 (`VarSpecDef`) 未能在 **OpenAPI (Swagger) Schema** 中正确生成的问题。\n*   **前端 UI**:\n    *   修复了在保存全局配置后，左侧资源列表**不会立即刷新**的问题。\n    *   修复了校验状态指示器在无信息时会渲染出一个不可见的“幽灵”元素的问题。\n\n### 🔨 重构与技术改进 (Refactoring & Technical Improvements)\n\n*   **核心类型系统重构**: 对变量类型系统 (`VarSpec`) 进行了大规模重构，将其拆分为 `Primitive`、`Record`、`List` 等具体实现。同时，`Number` 类型被细化为 `Int` 和 `Float`。\n*   **静态分析引擎升级**: 重构了静态分析引擎，实现了**按符文执行顺序进行数据流和类型校验**，使得类型检查更贴近实际执行逻辑，错误定位更准确。\n*   **前端类型安全**: 将配置对象的类型检测逻辑 (`isWorkflow`, `isTuum` 等) 集中到了 `@yaesandbox-frontend/core-services` 中，通过 TypeScript 类型守卫全面增强了类型安全。\n*   **错误持久化**: 引入了可序列化的错误记录 (`SerializableError`)，以支持在工作流执行失败时，将完整的错误信息持久化到存储中。\n*   **符文分类**: 增加了 `RuneCategory` 特性，允许为符文指定分类，并在前端以树状结构展示，优化了符文的组织和查找。\n\n### 🔧 开发者体验与工具 (Developer Experience & Tooling)\n\n*   **发布工具重构**: 原有的单一发布脚本 `release_helper.py` 已被完全重构为一个模块化的 Python 工具包 `release_tool`，极大地提高了可维护性和可扩展性。\n*   `pnpm` 版本已更新至 `10.19.0`。\n\n",
                "description": "获得内置/官方的配置插件。",
                "version": "0.1.0",
                "hash": "44fafa9520d12d4fd938102cb51a897620ee445883517df8347a06f54b873dbf",
                "url": "https://github.com/Creeper-of-Fire/YAESandBox/releases/download/v0.1.0/YAESandBox.Plugin.FileSystemConfigProvider.zip"
            }
        ]
    }
}