<!-- YAESandBox\Directory.Build.targets -->
<Project>

    <!-- 
      这是一个辅助 Target，当被 CollectSwaggerDocs 调用时，
      它会返回当前项目（被引用的那个项目）定义的 SwaggerDocToGenerate 列表。
    -->
    <Target Name="GetSwaggerDocsForReference" Returns="@(SwaggerDocToGenerate)" />
    
    <!-- ================================================================== -->
    <!-- == 解决方案级别的 NuGet 许可证报告生成 == -->
    <!-- ================================================================== -->

    <!--
      这个 Target 会在解决方案构建时运行一次。
      - `Condition="'$(BuildingSolutionFile)' == 'true'"` 确保只在构建整个 .sln 时触发。
      - `Condition="'$(_LicenseReportGenerated)' != 'true'"` 是一个信号量，防止此 Target 在一次解决方案构建中被多个项目重复执行。
    -->
    <Target Name="GenerateLicenseReportForSolution_Shared" AfterTargets="Build" Condition="'$(BuildingSolutionFile)' == 'true' AND '$(_LicenseReportGenerated)' != 'true'">
        <Message Text="[SHARED] 正在为解决方案 '$(SolutionFileName)' 生成 NuGet 许可证报告..." Importance="high"/>

        <PropertyGroup>
            <SolutionFilePath>$(SolutionPath)</SolutionFilePath>
            <LicenseOutputPath>$(SolutionDir)../frontend/apps/shell/public/licenses-backend.json</LicenseOutputPath>
            <!-- 设置一个信号量属性，告诉后续项目构建无需再次运行此 Target -->
            <_LicenseReportGenerated>true</_LicenseReportGenerated>
        </PropertyGroup>

        <Error Text="解决方案文件未找到: '$(SolutionFilePath)'" Condition="!Exists('$(SolutionFilePath)')"/>

        <Exec Command="nuget-license -i $(SolutionFilePath) -t -o jsonPretty -fo $(LicenseOutputPath) -exclude-projects *Tests*"
              ContinueOnError="WarnAndContinue"/>

        <Message Text="[SHARED] NuGet 许可证报告已生成到: $(LicenseOutputPath)" Importance="high" Condition="Exists('$(LicenseOutputPath)')"/>
    </Target>

</Project>