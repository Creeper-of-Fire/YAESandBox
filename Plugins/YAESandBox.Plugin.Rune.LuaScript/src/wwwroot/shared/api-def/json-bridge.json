{
  "json": {
    "documentation": "全局 JSON 处理对象，用于 Lua 值与 JSON 字符串之间的相互转换。基于 rxi/json.lua 库，行为符合 JSON 标准。",
    "methods": [
      {
        "name": "encode",
        "signature": "json.encode(value: table | any): string",
        "documentation": "将一个 Lua 值（例如 table, string, number, boolean, nil）序列化为 JSON 字符串。\n\n**特性:**\n- 自动区分数组和对象。\n- 正确处理字符串转义。\n- 会因循环引用而报错。\n\n**示例:**\n```lua\nlocal user = { id = 1, name = \"Alice\", roles = {\"admin\", \"editor\"} }\nlocal user_json = json.encode(user)\n-- user_json 的值为 '{\"id\":1,\"name\":\"Alice\",\"roles\":[\"admin\",\"editor\"]}'\n```",
        "insertText": "encode(${1:lua_value})"
      },
      {
        "name": "decode",
        "signature": "json.decode(jsonString: string): table | any",
        "documentation": "将一个 JSON 字符串反序列化为等效的 Lua 值。\n\n**特性:**\n- 能解析复杂的嵌套对象和数组。\n- 严格遵守 JSON 格式，对于无效的 JSON 字符串会报错。\n\n**示例:**\n```lua\nlocal json_str = '{\"id\":1,\"name\":\"Alice\",\"is_active\":true,\"metadata\":null}'\nlocal user_data = json.decode(json_str)\n\nlog.info('用户名: ' .. user_data.name) -- 输出 'Alice'\nlog.info('是否激活: ' .. tostring(user_data.is_active)) -- 输出 'true'\nif user_data.metadata == nil then\n  log.info('元数据为空')\nend\n```",
        "insertText": "decode('${1:json_string}')"
      }
    ]
  }
}