{
  "regex": {
    "documentation": "全局正则表达式对象，用于强大的字符串匹配、提取和替换。",
    "methods": [
      {
        "name": "is_match",
        "signature": "regex.is_match(input: string, pattern: string, options?: table): boolean",
        "documentation": "检查输入字符串是否匹配指定的正则表达式模式。\n\n**Options Table:**\n- `ignore_case`: boolean - 忽略大小写 (模式 i)\n- `multiline`: boolean - 多行模式 (模式 m)\n- `dotall`: boolean - 点号匹配所有 (模式 s)\n\n**示例:**\n```lua\n-- 检查是否包含 'hello'，不区分大小写\nlocal found = regex.is_match(\"world, Hello!\", \"hello\", { ignore_case = true })\n-- found 将是 true\n```",
        "insertText": "is_match('${1:input}', '${2:pattern}', { ignore_case = ${3:false} })"
      },
      {
        "name": "match",
        "signature": "regex.match(input: string, pattern: string, options?: table): table | nil",
        "documentation": "返回第一个匹配项及其所有捕获组的 table。如果无匹配则返回 nil。\n返回的 table 中，索引 1 是完整的匹配，索引 2 是第一个捕获组，以此类推。\n\n**示例:**\n```lua\nlocal text = \"用户: John Doe\"\nlocal result = regex.match(text, \"用户: (%a+) (%a+)\")\n-- result 将是 { \"用户: John Doe\", \"John\", \"Doe\" }\nif result then\n  log.info(\"全名: \" .. result[1])\n  log.info(\"姓: \" .. result[3])\nend\n```",
        "insertText": "match('${1:input}', '${2:pattern}')"
      },
      {
        "name": "match_all",
        "signature": "regex.match_all(input: string, pattern: string, options?: table): table",
        "documentation": "返回一个包含所有匹配项的 table。每个匹配项本身也是一个包含其捕获组的 table。\n\n**示例:**\n```lua\nlocal text = \"a=1, b=2, c=3\"\nlocal all_pairs = regex.match_all(text, \"(%a+)=(%d+)\")\n-- all_pairs 将是 { { \"a=1\", \"a\", \"1\" }, { \"b=2\", \"b\", \"2\" }, { \"c=3\", \"c\", \"3\" } }\nfor _, pair in ipairs(all_pairs) do\n  log.info(\"键: \" .. pair[2] .. \", 值: \" .. pair[3])\nend\n```",
        "insertText": "match_all('${1:input}', '${2:pattern}')"
      },
      {
        "name": "replace",
        "signature": "regex.replace(input: string, pattern: string, replacement: string, options?: table): string",
        "documentation": "在输入字符串中查找并替换匹配项。\n\n**Replacement String:**\n- 使用 `${name}` 或 `$1` 来引用捕获组。\n\n**Options Table:**\n- `ignore_case`, `multiline`, `dotall` \n- `count`: number - 要替换的最大匹配数。0 或省略表示全部替换。\n\n**示例 1: 基本替换**\n```lua\nlocal text = \"你好, 世界\"\nlocal new_text = regex.replace(text, \"世界\", \"Lua\")\n-- new_text 将是 \"你好, Lua\"\n```\n**示例 2: 使用捕获组和选项**\n```lua\nlocal text = \"apples, ORANGES, bananas\"\n-- 将水果名首字母大写，并只替换前两个\nlocal new_text = regex.replace(text, \"(%a+)\", function(m)\n  return m[2]:sub(1,1):upper() .. m[2]:sub(2):lower()\nend, { ignore_case = true, count = 2 })\n-- NLua 也支持将 Lua 函数作为替换参数，非常强大！\n-- new_text 结果将是 \"Apples, Oranges, bananas\"\n```",
        "insertText": "replace('${1:input}', '${2:pattern}', '${3:replacement}')"
      }
    ]
  }
}